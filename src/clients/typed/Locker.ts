/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"Locker","structs":{},"methods":[{"name":"create","desc":"Lifecycle method for creation","args":[{"name":"manager","type":"address"},{"name":"locker_type","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"get_version","desc":"Returns the version of the locker","args":[],"returns":{"type":"string"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"opt_in_product","desc":"Opt in to the product","args":[{"name":"product","type":"application"},{"name":"fee_txn","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"opt_out_product","desc":"Opt out from the product","args":[{"name":"product","type":"application"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"opt_in_coin","desc":"Opt in to the coin","args":[{"name":"coin","type":"asset"},{"name":"fee_txn","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"opt_out_coin","desc":"Opt out from the coin","args":[{"name":"coin","type":"asset"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"withdraw_coin","desc":"Withdraws all claimable coins from the locker","args":[{"name":"coin","type":"asset"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"withdraw_algo","desc":"Withdraws all claimable algos from the locker","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":1,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"locker_type":{"key":"bG9ja2VyX3R5cGU=","keyType":"AVMString","valueType":"AVMUint64","desc":"Type of the locker"},"manager":{"key":"bWFuYWdlcg==","keyType":"AVMString","valueType":"AVMBytes","desc":"Address of the manager of the locker"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCnB1c2hpbnQgMCAvLyAwCnJldHVybg=="},"bareActions":{"create":[],"call":["OptIn","UpdateApplication"]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Locker contract
 */
export type LockerArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create(address,uint64)void': {
      manager: string
      lockerType: bigint | number
    }
    'get_version()string': Record<string, never>
    'opt_in_product(application,pay)void': {
      product: bigint
      feeTxn: AppMethodCallTransactionArgument
    }
    'opt_out_product(application)void': {
      product: bigint
    }
    'opt_in_coin(asset,pay)void': {
      coin: bigint
      feeTxn: AppMethodCallTransactionArgument
    }
    'opt_out_coin(asset)void': {
      coin: bigint
    }
    'withdraw_coin(asset)void': {
      coin: bigint
    }
    'withdraw_algo()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create(address,uint64)void': [manager: string, lockerType: bigint | number]
    'get_version()string': []
    'opt_in_product(application,pay)void': [product: bigint, feeTxn: AppMethodCallTransactionArgument]
    'opt_out_product(application)void': [product: bigint]
    'opt_in_coin(asset,pay)void': [coin: bigint, feeTxn: AppMethodCallTransactionArgument]
    'opt_out_coin(asset)void': [coin: bigint]
    'withdraw_coin(asset)void': [coin: bigint]
    'withdraw_algo()void': []
  }
}

/**
 * The return type for each method
 */
export type LockerReturns = {
  'create(address,uint64)void': void
  'get_version()string': string
  'opt_in_product(application,pay)void': void
  'opt_out_product(application)void': void
  'opt_in_coin(asset,pay)void': void
  'opt_out_coin(asset)void': void
  'withdraw_coin(asset)void': void
  'withdraw_algo()void': void
}

/**
 * Defines the types of available calls and state of the Locker smart contract.
 */
export type LockerTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create(address,uint64)void' | 'create', {
      argsObj: LockerArgs['obj']['create(address,uint64)void']
      argsTuple: LockerArgs['tuple']['create(address,uint64)void']
      returns: LockerReturns['create(address,uint64)void']
    }>
    & Record<'get_version()string' | 'get_version', {
      argsObj: LockerArgs['obj']['get_version()string']
      argsTuple: LockerArgs['tuple']['get_version()string']
      returns: LockerReturns['get_version()string']
    }>
    & Record<'opt_in_product(application,pay)void' | 'opt_in_product', {
      argsObj: LockerArgs['obj']['opt_in_product(application,pay)void']
      argsTuple: LockerArgs['tuple']['opt_in_product(application,pay)void']
      returns: LockerReturns['opt_in_product(application,pay)void']
    }>
    & Record<'opt_out_product(application)void' | 'opt_out_product', {
      argsObj: LockerArgs['obj']['opt_out_product(application)void']
      argsTuple: LockerArgs['tuple']['opt_out_product(application)void']
      returns: LockerReturns['opt_out_product(application)void']
    }>
    & Record<'opt_in_coin(asset,pay)void' | 'opt_in_coin', {
      argsObj: LockerArgs['obj']['opt_in_coin(asset,pay)void']
      argsTuple: LockerArgs['tuple']['opt_in_coin(asset,pay)void']
      returns: LockerReturns['opt_in_coin(asset,pay)void']
    }>
    & Record<'opt_out_coin(asset)void' | 'opt_out_coin', {
      argsObj: LockerArgs['obj']['opt_out_coin(asset)void']
      argsTuple: LockerArgs['tuple']['opt_out_coin(asset)void']
      returns: LockerReturns['opt_out_coin(asset)void']
    }>
    & Record<'withdraw_coin(asset)void' | 'withdraw_coin', {
      argsObj: LockerArgs['obj']['withdraw_coin(asset)void']
      argsTuple: LockerArgs['tuple']['withdraw_coin(asset)void']
      returns: LockerReturns['withdraw_coin(asset)void']
    }>
    & Record<'withdraw_algo()void' | 'withdraw_algo', {
      argsObj: LockerArgs['obj']['withdraw_algo()void']
      argsTuple: LockerArgs['tuple']['withdraw_algo()void']
      returns: LockerReturns['withdraw_algo()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        /**
         * Type of the locker
         */
        lockerType: bigint
        /**
         * Address of the manager of the locker
         */
        manager: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type LockerSignatures = keyof LockerTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type LockerNonVoidMethodSignatures = keyof LockerTypes['methods'] extends infer T ? T extends keyof LockerTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Locker smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends LockerSignatures> = LockerTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Locker smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LockerSignatures> = LockerTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = LockerTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type LockerCreateCallParams =
  | Expand<CallParams<LockerArgs['obj']['create(address,uint64)void'] | LockerArgs['tuple']['create(address,uint64)void']> & {method: 'create'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<LockerArgs['obj']['create(address,uint64)void'] | LockerArgs['tuple']['create(address,uint64)void']> & {method: 'create(address,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type LockerUpdateCallParams =
  | Expand<AppClientBareCallParams> & {method?: never}
/**
 * Defines arguments required for the deploy method.
 */
export type LockerDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: LockerCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: LockerUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Locker smart contract
 */
export abstract class LockerParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends LockerCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create':
          case 'create(address,uint64)void':
            return LockerParamsFactory.create.create(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Locker smart contract using the create(address,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      create(params: CallParams<LockerArgs['obj']['create(address,uint64)void'] | LockerArgs['tuple']['create(address,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create(address,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.manager, params.args.lockerType],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the get_version()string ABI method
   *
   * Returns the version of the locker
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getVersion(params: CallParams<LockerArgs['obj']['get_version()string'] | LockerArgs['tuple']['get_version()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_version()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the opt_in_product(application,pay)void ABI method
   *
   * Opt in to the product
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInProduct(params: CallParams<LockerArgs['obj']['opt_in_product(application,pay)void'] | LockerArgs['tuple']['opt_in_product(application,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'opt_in_product(application,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.product, params.args.feeTxn],
    }
  }
  /**
   * Constructs a no op call for the opt_out_product(application)void ABI method
   *
   * Opt out from the product
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optOutProduct(params: CallParams<LockerArgs['obj']['opt_out_product(application)void'] | LockerArgs['tuple']['opt_out_product(application)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'opt_out_product(application)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.product],
    }
  }
  /**
   * Constructs a no op call for the opt_in_coin(asset,pay)void ABI method
   *
   * Opt in to the coin
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInCoin(params: CallParams<LockerArgs['obj']['opt_in_coin(asset,pay)void'] | LockerArgs['tuple']['opt_in_coin(asset,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'opt_in_coin(asset,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.coin, params.args.feeTxn],
    }
  }
  /**
   * Constructs a no op call for the opt_out_coin(asset)void ABI method
   *
   * Opt out from the coin
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optOutCoin(params: CallParams<LockerArgs['obj']['opt_out_coin(asset)void'] | LockerArgs['tuple']['opt_out_coin(asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'opt_out_coin(asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.coin],
    }
  }
  /**
   * Constructs a no op call for the withdraw_coin(asset)void ABI method
   *
   * Withdraws all claimable coins from the locker
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawCoin(params: CallParams<LockerArgs['obj']['withdraw_coin(asset)void'] | LockerArgs['tuple']['withdraw_coin(asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw_coin(asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.coin],
    }
  }
  /**
   * Constructs a no op call for the withdraw_algo()void ABI method
   *
   * Withdraws all claimable algos from the locker
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawAlgo(params: CallParams<LockerArgs['obj']['withdraw_algo()void'] | LockerArgs['tuple']['withdraw_algo()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw_algo()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Locker smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class LockerFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `LockerFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }

  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }

  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }

  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }

  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new LockerClient(this.appFactory.getAppClientById(params))
  }

  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new LockerClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Locker smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: LockerDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? LockerParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (LockerCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new LockerClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Locker smart contract using the create(address,uint64)void ABI method.
       *
       * Lifecycle method for creation
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      create: (params: CallParams<LockerArgs['obj']['create(address,uint64)void'] | LockerArgs['tuple']['create(address,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(LockerParamsFactory.create.create(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the Locker smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployUpdate call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appFactory.params.bare.deployUpdate(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Locker smart contract using the create(address,uint64)void ABI method.
       *
       * Lifecycle method for creation
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      create: (params: CallParams<LockerArgs['obj']['create(address,uint64)void'] | LockerArgs['tuple']['create(address,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(LockerParamsFactory.create.create(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Locker smart contract using an ABI method call using the create(address,uint64)void ABI method.
       *
       * Lifecycle method for creation
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      create: async (params: CallParams<LockerArgs['obj']['create(address,uint64)void'] | LockerArgs['tuple']['create(address,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(LockerParamsFactory.create.create(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | LockerReturns['create(address,uint64)void']) }, appClient: new LockerClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Locker smart contract
 */
export class LockerClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `LockerClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Locker app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `LockerClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends LockerNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }

  /**
   * Returns a new `LockerClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<LockerClient> {
    return new LockerClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }

  /**
   * Returns an `LockerClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<LockerClient> {
    return new LockerClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }

  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }

  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }

  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }

  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }

  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the Locker smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.params.bare.update(params)
      },
    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Locker smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.params.bare.optIn(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Locker smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Locker smart contract using the `get_version()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the version of the locker
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getVersion: (params: CallParams<LockerArgs['obj']['get_version()string'] | LockerArgs['tuple']['get_version()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(LockerParamsFactory.getVersion(params))
    },

    /**
     * Makes a call to the Locker smart contract using the `opt_in_product(application,pay)void` ABI method.
     *
     * Opt in to the product
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInProduct: (params: CallParams<LockerArgs['obj']['opt_in_product(application,pay)void'] | LockerArgs['tuple']['opt_in_product(application,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LockerParamsFactory.optInProduct(params))
    },

    /**
     * Makes a call to the Locker smart contract using the `opt_out_product(application)void` ABI method.
     *
     * Opt out from the product
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optOutProduct: (params: CallParams<LockerArgs['obj']['opt_out_product(application)void'] | LockerArgs['tuple']['opt_out_product(application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LockerParamsFactory.optOutProduct(params))
    },

    /**
     * Makes a call to the Locker smart contract using the `opt_in_coin(asset,pay)void` ABI method.
     *
     * Opt in to the coin
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInCoin: (params: CallParams<LockerArgs['obj']['opt_in_coin(asset,pay)void'] | LockerArgs['tuple']['opt_in_coin(asset,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LockerParamsFactory.optInCoin(params))
    },

    /**
     * Makes a call to the Locker smart contract using the `opt_out_coin(asset)void` ABI method.
     *
     * Opt out from the coin
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optOutCoin: (params: CallParams<LockerArgs['obj']['opt_out_coin(asset)void'] | LockerArgs['tuple']['opt_out_coin(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LockerParamsFactory.optOutCoin(params))
    },

    /**
     * Makes a call to the Locker smart contract using the `withdraw_coin(asset)void` ABI method.
     *
     * Withdraws all claimable coins from the locker
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawCoin: (params: CallParams<LockerArgs['obj']['withdraw_coin(asset)void'] | LockerArgs['tuple']['withdraw_coin(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LockerParamsFactory.withdrawCoin(params))
    },

    /**
     * Makes a call to the Locker smart contract using the `withdraw_algo()void` ABI method.
     *
     * Withdraws all claimable algos from the locker
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawAlgo: (params: CallParams<LockerArgs['obj']['withdraw_algo()void'] | LockerArgs['tuple']['withdraw_algo()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(LockerParamsFactory.withdrawAlgo(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the Locker smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.createTransaction.bare.update(params)
      },
    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Locker smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.createTransaction.bare.optIn(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Locker smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Locker smart contract using the `get_version()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the version of the locker
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getVersion: (params: CallParams<LockerArgs['obj']['get_version()string'] | LockerArgs['tuple']['get_version()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(LockerParamsFactory.getVersion(params))
    },

    /**
     * Makes a call to the Locker smart contract using the `opt_in_product(application,pay)void` ABI method.
     *
     * Opt in to the product
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInProduct: (params: CallParams<LockerArgs['obj']['opt_in_product(application,pay)void'] | LockerArgs['tuple']['opt_in_product(application,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LockerParamsFactory.optInProduct(params))
    },

    /**
     * Makes a call to the Locker smart contract using the `opt_out_product(application)void` ABI method.
     *
     * Opt out from the product
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optOutProduct: (params: CallParams<LockerArgs['obj']['opt_out_product(application)void'] | LockerArgs['tuple']['opt_out_product(application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LockerParamsFactory.optOutProduct(params))
    },

    /**
     * Makes a call to the Locker smart contract using the `opt_in_coin(asset,pay)void` ABI method.
     *
     * Opt in to the coin
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInCoin: (params: CallParams<LockerArgs['obj']['opt_in_coin(asset,pay)void'] | LockerArgs['tuple']['opt_in_coin(asset,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LockerParamsFactory.optInCoin(params))
    },

    /**
     * Makes a call to the Locker smart contract using the `opt_out_coin(asset)void` ABI method.
     *
     * Opt out from the coin
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optOutCoin: (params: CallParams<LockerArgs['obj']['opt_out_coin(asset)void'] | LockerArgs['tuple']['opt_out_coin(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LockerParamsFactory.optOutCoin(params))
    },

    /**
     * Makes a call to the Locker smart contract using the `withdraw_coin(asset)void` ABI method.
     *
     * Withdraws all claimable coins from the locker
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawCoin: (params: CallParams<LockerArgs['obj']['withdraw_coin(asset)void'] | LockerArgs['tuple']['withdraw_coin(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LockerParamsFactory.withdrawCoin(params))
    },

    /**
     * Makes a call to the Locker smart contract using the `withdraw_algo()void` ABI method.
     *
     * Withdraws all claimable algos from the locker
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawAlgo: (params: CallParams<LockerArgs['obj']['withdraw_algo()void'] | LockerArgs['tuple']['withdraw_algo()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(LockerParamsFactory.withdrawAlgo(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the Locker smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & SendParams>) => {
        return this.appClient.send.bare.update(params)
      },
    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Locker smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: Expand<AppClientBareCallParams & SendParams>) => {
        return this.appClient.send.bare.optIn(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Locker smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Locker smart contract using the `get_version()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the version of the locker
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getVersion: async (params: CallParams<LockerArgs['obj']['get_version()string'] | LockerArgs['tuple']['get_version()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(LockerParamsFactory.getVersion(params))
      return {...result, return: result.return as unknown as (undefined | LockerReturns['get_version()string'])}
    },

    /**
     * Makes a call to the Locker smart contract using the `opt_in_product(application,pay)void` ABI method.
     *
     * Opt in to the product
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInProduct: async (params: CallParams<LockerArgs['obj']['opt_in_product(application,pay)void'] | LockerArgs['tuple']['opt_in_product(application,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LockerParamsFactory.optInProduct(params))
      return {...result, return: result.return as unknown as (undefined | LockerReturns['opt_in_product(application,pay)void'])}
    },

    /**
     * Makes a call to the Locker smart contract using the `opt_out_product(application)void` ABI method.
     *
     * Opt out from the product
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optOutProduct: async (params: CallParams<LockerArgs['obj']['opt_out_product(application)void'] | LockerArgs['tuple']['opt_out_product(application)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LockerParamsFactory.optOutProduct(params))
      return {...result, return: result.return as unknown as (undefined | LockerReturns['opt_out_product(application)void'])}
    },

    /**
     * Makes a call to the Locker smart contract using the `opt_in_coin(asset,pay)void` ABI method.
     *
     * Opt in to the coin
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInCoin: async (params: CallParams<LockerArgs['obj']['opt_in_coin(asset,pay)void'] | LockerArgs['tuple']['opt_in_coin(asset,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LockerParamsFactory.optInCoin(params))
      return {...result, return: result.return as unknown as (undefined | LockerReturns['opt_in_coin(asset,pay)void'])}
    },

    /**
     * Makes a call to the Locker smart contract using the `opt_out_coin(asset)void` ABI method.
     *
     * Opt out from the coin
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optOutCoin: async (params: CallParams<LockerArgs['obj']['opt_out_coin(asset)void'] | LockerArgs['tuple']['opt_out_coin(asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LockerParamsFactory.optOutCoin(params))
      return {...result, return: result.return as unknown as (undefined | LockerReturns['opt_out_coin(asset)void'])}
    },

    /**
     * Makes a call to the Locker smart contract using the `withdraw_coin(asset)void` ABI method.
     *
     * Withdraws all claimable coins from the locker
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawCoin: async (params: CallParams<LockerArgs['obj']['withdraw_coin(asset)void'] | LockerArgs['tuple']['withdraw_coin(asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LockerParamsFactory.withdrawCoin(params))
      return {...result, return: result.return as unknown as (undefined | LockerReturns['withdraw_coin(asset)void'])}
    },

    /**
     * Makes a call to the Locker smart contract using the `withdraw_algo()void` ABI method.
     *
     * Withdraws all claimable algos from the locker
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawAlgo: async (params: CallParams<LockerArgs['obj']['withdraw_algo()void'] | LockerArgs['tuple']['withdraw_algo()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(LockerParamsFactory.withdrawAlgo(params))
      return {...result, return: result.return as unknown as (undefined | LockerReturns['withdraw_algo()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new LockerClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Locker smart contract using the `get_version()string` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the version of the locker
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getVersion(params: CallParams<LockerArgs['obj']['get_version()string'] | LockerArgs['tuple']['get_version()string']> = {args: []}) {
    const result = await this.appClient.send.call(LockerParamsFactory.getVersion(params))
    return result.return as unknown as LockerReturns['get_version()string']
  }

  /**
   * Methods to access state for the current Locker app
   */
  state = {
    /**
     * Methods to access global state for the current Locker app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          lockerType: result.locker_type,
          manager: new BinaryStateValue(result.manager),
        }
      },
      /**
       * Get the current value of the locker_type key in global state
       */
      lockerType: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("locker_type")) as bigint | undefined },
      /**
       * Get the current value of the manager key in global state
       */
      manager: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("manager")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): LockerComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a get_version()string method call against the Locker contract
       */
      getVersion(params: CallParams<LockerArgs['obj']['get_version()string'] | LockerArgs['tuple']['get_version()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getVersion(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_version()string', v))
        return this
      },
      /**
       * Add a opt_in_product(application,pay)void method call against the Locker contract
       */
      optInProduct(params: CallParams<LockerArgs['obj']['opt_in_product(application,pay)void'] | LockerArgs['tuple']['opt_in_product(application,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInProduct(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a opt_out_product(application)void method call against the Locker contract
       */
      optOutProduct(params: CallParams<LockerArgs['obj']['opt_out_product(application)void'] | LockerArgs['tuple']['opt_out_product(application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optOutProduct(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a opt_in_coin(asset,pay)void method call against the Locker contract
       */
      optInCoin(params: CallParams<LockerArgs['obj']['opt_in_coin(asset,pay)void'] | LockerArgs['tuple']['opt_in_coin(asset,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInCoin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a opt_out_coin(asset)void method call against the Locker contract
       */
      optOutCoin(params: CallParams<LockerArgs['obj']['opt_out_coin(asset)void'] | LockerArgs['tuple']['opt_out_coin(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optOutCoin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdraw_coin(asset)void method call against the Locker contract
       */
      withdrawCoin(params: CallParams<LockerArgs['obj']['withdraw_coin(asset)void'] | LockerArgs['tuple']['withdraw_coin(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawCoin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdraw_algo()void method call against the Locker contract
       */
      withdrawAlgo(params: CallParams<LockerArgs['obj']['withdraw_algo()void'] | LockerArgs['tuple']['withdraw_algo()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawAlgo(params)))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        return {
          bare: (params?: AppClientBareCallParams & AppClientCompilationParams ) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdate(await client.params.update.bare(params)))
            return this
          },
        }
      },
      get optIn() {
        return {
          bare: (params?: AppClientBareCallParams ) => {
            promiseChain = promiseChain.then(() => composer.addAppCall(client.params.optIn.bare(params)))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the Locker contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as LockerComposer
  }
}
export type LockerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the get_version()string ABI method.
   *
   * Returns the version of the locker
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVersion(params?: CallParams<LockerArgs['obj']['get_version()string'] | LockerArgs['tuple']['get_version()string']>): LockerComposer<[...TReturns, LockerReturns['get_version()string'] | undefined]>

  /**
   * Calls the opt_in_product(application,pay)void ABI method.
   *
   * Opt in to the product
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInProduct(params?: CallParams<LockerArgs['obj']['opt_in_product(application,pay)void'] | LockerArgs['tuple']['opt_in_product(application,pay)void']>): LockerComposer<[...TReturns, LockerReturns['opt_in_product(application,pay)void'] | undefined]>

  /**
   * Calls the opt_out_product(application)void ABI method.
   *
   * Opt out from the product
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optOutProduct(params?: CallParams<LockerArgs['obj']['opt_out_product(application)void'] | LockerArgs['tuple']['opt_out_product(application)void']>): LockerComposer<[...TReturns, LockerReturns['opt_out_product(application)void'] | undefined]>

  /**
   * Calls the opt_in_coin(asset,pay)void ABI method.
   *
   * Opt in to the coin
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInCoin(params?: CallParams<LockerArgs['obj']['opt_in_coin(asset,pay)void'] | LockerArgs['tuple']['opt_in_coin(asset,pay)void']>): LockerComposer<[...TReturns, LockerReturns['opt_in_coin(asset,pay)void'] | undefined]>

  /**
   * Calls the opt_out_coin(asset)void ABI method.
   *
   * Opt out from the coin
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optOutCoin(params?: CallParams<LockerArgs['obj']['opt_out_coin(asset)void'] | LockerArgs['tuple']['opt_out_coin(asset)void']>): LockerComposer<[...TReturns, LockerReturns['opt_out_coin(asset)void'] | undefined]>

  /**
   * Calls the withdraw_coin(asset)void ABI method.
   *
   * Withdraws all claimable coins from the locker
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawCoin(params?: CallParams<LockerArgs['obj']['withdraw_coin(asset)void'] | LockerArgs['tuple']['withdraw_coin(asset)void']>): LockerComposer<[...TReturns, LockerReturns['withdraw_coin(asset)void'] | undefined]>

  /**
   * Calls the withdraw_algo()void ABI method.
   *
   * Withdraws all claimable algos from the locker
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawAlgo(params?: CallParams<LockerArgs['obj']['withdraw_algo()void'] | LockerArgs['tuple']['withdraw_algo()void']>): LockerComposer<[...TReturns, LockerReturns['withdraw_algo()void'] | undefined]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the Locker smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): LockerComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the Locker smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): LockerComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Locker smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): LockerComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): LockerComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<LockerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<LockerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<LockerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<LockerComposerResults<TReturns>>
}
export type LockerComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

