/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"Oracle","structs":{},"methods":[{"name":"get_version","desc":"Returns the version of the contract","args":[],"returns":{"type":"string"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"update_price","desc":"Sets the new price of 1 Algo in USD","args":[{"name":"price","type":"uint64","desc":"Price of 1 Algo in USD (CENTS)"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_admin","desc":"Sets the new admin address","args":[{"name":"admin","type":"address","desc":"Address of the new admin"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"compute_platform_fee","desc":"Returns the platform fee in microalgo for the given amount of USD","args":[{"name":"whole_usd","type":"uint64","desc":"Amount of USD in whole numbers (CENTS)"}],"returns":{"type":"uint64"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":3,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin":{"key":"YWRtaW4=","keyType":"AVMString","valueType":"AVMBytes","desc":"Admin address"},"decimals":{"key":"ZGVjaW1hbHM=","keyType":"AVMString","valueType":"AVMUint64","desc":"Number of decimals in USD"},"price":{"key":"cHJpY2U=","keyType":"AVMString","valueType":"AVMUint64","desc":"Price of 1 Algo in USD"},"updated_at":{"key":"dXBkYXRlZF9hdA==","keyType":"AVMString","valueType":"AVMUint64","desc":"Last time the price was updated"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":""},"bareActions":{"create":["NoOp"],"call":["UpdateApplication"]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Oracle contract
 */
export type OracleArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'get_version()string': Record<string, never>
    'update_price(uint64)void': {
      /**
       * Price of 1 Algo in USD (CENTS)
       */
      price: bigint | number
    }
    'update_admin(address)void': {
      /**
       * Address of the new admin
       */
      admin: string
    }
    'compute_platform_fee(uint64)uint64': {
      /**
       * Amount of USD in whole numbers (CENTS)
       */
      wholeUsd: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'get_version()string': []
    'update_price(uint64)void': [price: bigint | number]
    'update_admin(address)void': [admin: string]
    'compute_platform_fee(uint64)uint64': [wholeUsd: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type OracleReturns = {
  'get_version()string': string
  'update_price(uint64)void': void
  'update_admin(address)void': void
  'compute_platform_fee(uint64)uint64': bigint
}

/**
 * Defines the types of available calls and state of the Oracle smart contract.
 */
export type OracleTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'get_version()string' | 'get_version', {
      argsObj: OracleArgs['obj']['get_version()string']
      argsTuple: OracleArgs['tuple']['get_version()string']
      returns: OracleReturns['get_version()string']
    }>
    & Record<'update_price(uint64)void' | 'update_price', {
      argsObj: OracleArgs['obj']['update_price(uint64)void']
      argsTuple: OracleArgs['tuple']['update_price(uint64)void']
      returns: OracleReturns['update_price(uint64)void']
    }>
    & Record<'update_admin(address)void' | 'update_admin', {
      argsObj: OracleArgs['obj']['update_admin(address)void']
      argsTuple: OracleArgs['tuple']['update_admin(address)void']
      returns: OracleReturns['update_admin(address)void']
    }>
    & Record<'compute_platform_fee(uint64)uint64' | 'compute_platform_fee', {
      argsObj: OracleArgs['obj']['compute_platform_fee(uint64)uint64']
      argsTuple: OracleArgs['tuple']['compute_platform_fee(uint64)uint64']
      returns: OracleReturns['compute_platform_fee(uint64)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        /**
         * Admin address
         */
        admin: BinaryState
        /**
         * Number of decimals in USD
         */
        decimals: bigint
        /**
         * Price of 1 Algo in USD
         */
        price: bigint
        /**
         * Last time the price was updated
         */
        updatedAt: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type OracleSignatures = keyof OracleTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type OracleNonVoidMethodSignatures = keyof OracleTypes['methods'] extends infer T ? T extends keyof OracleTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Oracle smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends OracleSignatures> = OracleTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Oracle smart contract to the method's return type
 */
export type MethodReturn<TSignature extends OracleSignatures> = OracleTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = OracleTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type OracleCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type OracleUpdateCallParams =
  | Expand<AppClientBareCallParams> & {method?: never}
/**
 * Defines arguments required for the deploy method.
 */
export type OracleDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: OracleCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: OracleUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Oracle smart contract
 */
export abstract class OracleParamsFactory {
  /**
   * Constructs a no op call for the get_version()string ABI method
   *
   * Returns the version of the contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getVersion(params: CallParams<OracleArgs['obj']['get_version()string'] | OracleArgs['tuple']['get_version()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_version()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the update_price(uint64)void ABI method
   *
   * Sets the new price of 1 Algo in USD
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePrice(params: CallParams<OracleArgs['obj']['update_price(uint64)void'] | OracleArgs['tuple']['update_price(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_price(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.price],
    }
  }
  /**
   * Constructs a no op call for the update_admin(address)void ABI method
   *
   * Sets the new admin address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateAdmin(params: CallParams<OracleArgs['obj']['update_admin(address)void'] | OracleArgs['tuple']['update_admin(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_admin(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.admin],
    }
  }
  /**
   * Constructs a no op call for the compute_platform_fee(uint64)uint64 ABI method
   *
   * Returns the platform fee in microalgo for the given amount of USD
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static computePlatformFee(params: CallParams<OracleArgs['obj']['compute_platform_fee(uint64)uint64'] | OracleArgs['tuple']['compute_platform_fee(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'compute_platform_fee(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.wholeUsd],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Oracle smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class OracleFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `OracleFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }

  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }

  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }

  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }

  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new OracleClient(this.appFactory.getAppClientById(params))
  }

  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new OracleClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Oracle smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: OracleDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new OracleClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Oracle smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the Oracle smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployUpdate call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appFactory.params.bare.deployUpdate(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Oracle smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Oracle smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new OracleClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Oracle smart contract
 */
export class OracleClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `OracleClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Oracle app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `OracleClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends OracleNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }

  /**
   * Returns a new `OracleClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<OracleClient> {
    return new OracleClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }

  /**
   * Returns an `OracleClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<OracleClient> {
    return new OracleClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }

  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }

  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }

  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }

  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }

  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the Oracle smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.params.bare.update(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Oracle smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Oracle smart contract using the `get_version()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the version of the contract
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getVersion: (params: CallParams<OracleArgs['obj']['get_version()string'] | OracleArgs['tuple']['get_version()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OracleParamsFactory.getVersion(params))
    },

    /**
     * Makes a call to the Oracle smart contract using the `update_price(uint64)void` ABI method.
     *
     * Sets the new price of 1 Algo in USD
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePrice: (params: CallParams<OracleArgs['obj']['update_price(uint64)void'] | OracleArgs['tuple']['update_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OracleParamsFactory.updatePrice(params))
    },

    /**
     * Makes a call to the Oracle smart contract using the `update_admin(address)void` ABI method.
     *
     * Sets the new admin address
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateAdmin: (params: CallParams<OracleArgs['obj']['update_admin(address)void'] | OracleArgs['tuple']['update_admin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OracleParamsFactory.updateAdmin(params))
    },

    /**
     * Makes a call to the Oracle smart contract using the `compute_platform_fee(uint64)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the platform fee in microalgo for the given amount of USD
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    computePlatformFee: (params: CallParams<OracleArgs['obj']['compute_platform_fee(uint64)uint64'] | OracleArgs['tuple']['compute_platform_fee(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OracleParamsFactory.computePlatformFee(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the Oracle smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.createTransaction.bare.update(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Oracle smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Oracle smart contract using the `get_version()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the version of the contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getVersion: (params: CallParams<OracleArgs['obj']['get_version()string'] | OracleArgs['tuple']['get_version()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OracleParamsFactory.getVersion(params))
    },

    /**
     * Makes a call to the Oracle smart contract using the `update_price(uint64)void` ABI method.
     *
     * Sets the new price of 1 Algo in USD
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePrice: (params: CallParams<OracleArgs['obj']['update_price(uint64)void'] | OracleArgs['tuple']['update_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OracleParamsFactory.updatePrice(params))
    },

    /**
     * Makes a call to the Oracle smart contract using the `update_admin(address)void` ABI method.
     *
     * Sets the new admin address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateAdmin: (params: CallParams<OracleArgs['obj']['update_admin(address)void'] | OracleArgs['tuple']['update_admin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OracleParamsFactory.updateAdmin(params))
    },

    /**
     * Makes a call to the Oracle smart contract using the `compute_platform_fee(uint64)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the platform fee in microalgo for the given amount of USD
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    computePlatformFee: (params: CallParams<OracleArgs['obj']['compute_platform_fee(uint64)uint64'] | OracleArgs['tuple']['compute_platform_fee(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OracleParamsFactory.computePlatformFee(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the Oracle smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & SendParams>) => {
        return this.appClient.send.bare.update(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Oracle smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Oracle smart contract using the `get_version()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the version of the contract
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getVersion: async (params: CallParams<OracleArgs['obj']['get_version()string'] | OracleArgs['tuple']['get_version()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OracleParamsFactory.getVersion(params))
      return {...result, return: result.return as unknown as (undefined | OracleReturns['get_version()string'])}
    },

    /**
     * Makes a call to the Oracle smart contract using the `update_price(uint64)void` ABI method.
     *
     * Sets the new price of 1 Algo in USD
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePrice: async (params: CallParams<OracleArgs['obj']['update_price(uint64)void'] | OracleArgs['tuple']['update_price(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OracleParamsFactory.updatePrice(params))
      return {...result, return: result.return as unknown as (undefined | OracleReturns['update_price(uint64)void'])}
    },

    /**
     * Makes a call to the Oracle smart contract using the `update_admin(address)void` ABI method.
     *
     * Sets the new admin address
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateAdmin: async (params: CallParams<OracleArgs['obj']['update_admin(address)void'] | OracleArgs['tuple']['update_admin(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OracleParamsFactory.updateAdmin(params))
      return {...result, return: result.return as unknown as (undefined | OracleReturns['update_admin(address)void'])}
    },

    /**
     * Makes a call to the Oracle smart contract using the `compute_platform_fee(uint64)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the platform fee in microalgo for the given amount of USD
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    computePlatformFee: async (params: CallParams<OracleArgs['obj']['compute_platform_fee(uint64)uint64'] | OracleArgs['tuple']['compute_platform_fee(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OracleParamsFactory.computePlatformFee(params))
      return {...result, return: result.return as unknown as (undefined | OracleReturns['compute_platform_fee(uint64)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new OracleClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Oracle smart contract using the `get_version()string` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the version of the contract
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getVersion(params: CallParams<OracleArgs['obj']['get_version()string'] | OracleArgs['tuple']['get_version()string']> = {args: []}) {
    const result = await this.appClient.send.call(OracleParamsFactory.getVersion(params))
    return result.return as unknown as OracleReturns['get_version()string']
  }

  /**
   * Makes a readonly (simulated) call to the Oracle smart contract using the `compute_platform_fee(uint64)uint64` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the platform fee in microalgo for the given amount of USD
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async computePlatformFee(params: CallParams<OracleArgs['obj']['compute_platform_fee(uint64)uint64'] | OracleArgs['tuple']['compute_platform_fee(uint64)uint64']>) {
    const result = await this.appClient.send.call(OracleParamsFactory.computePlatformFee(params))
    return result.return as unknown as OracleReturns['compute_platform_fee(uint64)uint64']
  }

  /**
   * Methods to access state for the current Oracle app
   */
  state = {
    /**
     * Methods to access global state for the current Oracle app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: new BinaryStateValue(result.admin),
          decimals: result.decimals,
          price: result.price,
          updatedAt: result.updated_at,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin")) as Uint8Array | undefined) },
      /**
       * Get the current value of the decimals key in global state
       */
      decimals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("decimals")) as bigint | undefined },
      /**
       * Get the current value of the price key in global state
       */
      price: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("price")) as bigint | undefined },
      /**
       * Get the current value of the updated_at key in global state
       */
      updatedAt: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("updated_at")) as bigint | undefined },
    },
  }

  public newGroup(): OracleComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a get_version()string method call against the Oracle contract
       */
      getVersion(params: CallParams<OracleArgs['obj']['get_version()string'] | OracleArgs['tuple']['get_version()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getVersion(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_version()string', v))
        return this
      },
      /**
       * Add a update_price(uint64)void method call against the Oracle contract
       */
      updatePrice(params: CallParams<OracleArgs['obj']['update_price(uint64)void'] | OracleArgs['tuple']['update_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updatePrice(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_admin(address)void method call against the Oracle contract
       */
      updateAdmin(params: CallParams<OracleArgs['obj']['update_admin(address)void'] | OracleArgs['tuple']['update_admin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a compute_platform_fee(uint64)uint64 method call against the Oracle contract
       */
      computePlatformFee(params: CallParams<OracleArgs['obj']['compute_platform_fee(uint64)uint64'] | OracleArgs['tuple']['compute_platform_fee(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.computePlatformFee(params)))
        resultMappers.push((v) => client.decodeReturnValue('compute_platform_fee(uint64)uint64', v))
        return this
      },
      get update() {
        return {
          bare: (params?: AppClientBareCallParams & AppClientCompilationParams ) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdate(await client.params.update.bare(params)))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the Oracle contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as OracleComposer
  }
}
export type OracleComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the get_version()string ABI method.
   *
   * Returns the version of the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVersion(params?: CallParams<OracleArgs['obj']['get_version()string'] | OracleArgs['tuple']['get_version()string']>): OracleComposer<[...TReturns, OracleReturns['get_version()string'] | undefined]>

  /**
   * Calls the update_price(uint64)void ABI method.
   *
   * Sets the new price of 1 Algo in USD
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePrice(params?: CallParams<OracleArgs['obj']['update_price(uint64)void'] | OracleArgs['tuple']['update_price(uint64)void']>): OracleComposer<[...TReturns, OracleReturns['update_price(uint64)void'] | undefined]>

  /**
   * Calls the update_admin(address)void ABI method.
   *
   * Sets the new admin address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAdmin(params?: CallParams<OracleArgs['obj']['update_admin(address)void'] | OracleArgs['tuple']['update_admin(address)void']>): OracleComposer<[...TReturns, OracleReturns['update_admin(address)void'] | undefined]>

  /**
   * Calls the compute_platform_fee(uint64)uint64 ABI method.
   *
   * Returns the platform fee in microalgo for the given amount of USD
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  computePlatformFee(params?: CallParams<OracleArgs['obj']['compute_platform_fee(uint64)uint64'] | OracleArgs['tuple']['compute_platform_fee(uint64)uint64']>): OracleComposer<[...TReturns, OracleReturns['compute_platform_fee(uint64)uint64'] | undefined]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the Oracle smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): OracleComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Oracle smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): OracleComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): OracleComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<OracleComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<OracleComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<OracleComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<OracleComposerResults<TReturns>>
}
export type OracleComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

