/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"Registry","structs":{},"methods":[{"name":"create","desc":"Creates a new instance of the REGISTRY.","args":[{"name":"oracle_id","type":"uint64","desc":"The ID of the Subtopia Price Oracle."}],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"get_version","desc":"Gets the version of the REGISTRY.","args":[],"returns":{"type":"string","desc":"The TEAL expression."},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"get_locker_version","desc":"Gets the latest version of the locker stored in precompiles.","args":[],"returns":{"type":"string","desc":"The TEAL expression."},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"get_product_version","desc":"Gets the latest version of the product stored in precompiles.","args":[{"name":"product_type","type":"uint64"}],"returns":{"type":"string","desc":"The TEAL expression."},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"get_locker","desc":"Gets the locker of the manager.","args":[{"name":"manager","type":"address","desc":"The manager address."},{"name":"locker_type","type":"uint64","desc":"The locker type."}],"returns":{"type":"uint64","desc":"The TEAL expression."},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"update_oracle_id","desc":"Updates the ORACLE (Subtopia Price Oracle) application ID.\nArs: oracle (abi.Application): The new ORACLE application ID.","args":[{"name":"new_oracle","type":"application"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_product_oracle_id","desc":"Updates the ORACLE (Subtopia Price Oracle) application ID for child product.\nArs: oracle (abi.Application): The new ORACLE application ID.","args":[{"name":"product","type":"application"},{"name":"product_type","type":"uint64"},{"name":"new_oracle","type":"application"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_locker_precompile","desc":"Updates the locker precompiles stored in boxes.","args":[{"name":"version","type":"string","desc":"The new version."},{"name":"approval","type":"byte[]","desc":"The new approval program."},{"name":"clear","type":"byte[]","desc":"The new clear program."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_product_precompile","desc":"Updates the product precompiles stored in boxes.","args":[{"name":"version","type":"string","desc":"The new version."},{"name":"product_type","type":"uint64"},{"name":"approval","type":"byte[]","desc":"The new approval program."},{"name":"clear","type":"byte[]","desc":"The new clear program."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"append_extra_approval_chunk","desc":"Helper utility to allow appending extra approval chunks within single atomic group","args":[{"name":"approval","type":"byte[]","desc":"The new approval program."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_locker","desc":"Updates the locker of the manager.\nArgs:     manager (abi.Address): The manager address.     locker (abi.Application): The new locker.     locker_type (abi.Uint64): The locker type.     oracle (abi.Application): Oracle reference, a bit redundant but better than     forcing foreign app reference array manually","args":[{"name":"manager","type":"address"},{"name":"locker","type":"application"},{"name":"locker_type","type":"uint64"},{"name":"oracle","type":"application"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_product","desc":"Updates the Product of the manager.\nArgs:     product (abi.Application): The new product.     oracle (abi.Application): Oracle reference, a bit redundant but better than     forcing foreign app reference array manually","args":[{"name":"product","type":"application"},{"name":"product_type","type":"uint64"},{"name":"oracle","type":"application"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"create_locker","desc":"Creates a locker for the manager.","args":[{"name":"manager","type":"address","desc":"The manager address."},{"name":"locker_type","type":"uint64","desc":"The locker type."},{"name":"fee_txn","type":"pay","desc":"The fee transaction."}],"returns":{"type":"uint64","desc":"The TEAL expression."},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"create_product","desc":"Creates a new Product.","args":[{"name":"product_name","type":"string","desc":"The name of the product (subtopia, netflix, etc)"},{"name":"product_type","type":"uint64","desc":"The type of the Product."},{"name":"subscription_name","type":"string","desc":"The subscription name of the product (pro, etc)"},{"name":"price","type":"uint64","desc":"The price of the Product."},{"name":"max_subs","type":"uint64","desc":"The maximum number of subscriptions."},{"name":"coin","type":"asset","desc":"The coin of the Product."},{"name":"unit_name","type":"string","desc":"The unit name of the Product."},{"name":"image_url","type":"string","desc":"The image URL of the Product."},{"name":"duration","type":"uint64"},{"name":"manager","type":"address","desc":"The manager address."},{"name":"locker","type":"application","desc":"The locker."},{"name":"oracle","type":"application","desc":"The oracle."},{"name":"fee_txn","type":"pay","desc":"The fee transaction."},{"name":"platform_fee_txn","type":"pay","desc":"The platform fee transaction."}],"returns":{"type":"uint64","desc":"The TEAL expression."},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"transfer_product","desc":"Transfers the Product to the new manager.","args":[{"name":"product","type":"application","desc":"The Product."},{"name":"old_locker","type":"application","desc":"The old locker."},{"name":"new_manager","type":"address","desc":"The new manager address."},{"name":"transfer_fee_txn","type":"pay","desc":"The transfer fee transaction."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"delete_product","desc":"Deletes the Product.","args":[{"name":"product","type":"application","desc":"The Product."},{"name":"locker","type":"application","desc":"The locker."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":1,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"oracle_id":{"key":"b3JhY2xlX2lk","keyType":"AVMString","valueType":"AVMUint64","desc":"ID of Subtopia Price Oracle contract"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":""},"bareActions":{"create":[],"call":["UpdateApplication"]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Registry contract
 */
export type RegistryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create(uint64)void': {
      /**
       * The ID of the Subtopia Price Oracle.
       */
      oracleId: bigint | number
    }
    'get_version()string': Record<string, never>
    'get_locker_version()string': Record<string, never>
    'get_product_version(uint64)string': {
      productType: bigint | number
    }
    'get_locker(address,uint64)uint64': {
      /**
       * The manager address.
       */
      manager: string
      /**
       * The locker type.
       */
      lockerType: bigint | number
    }
    'update_oracle_id(application)void': {
      newOracle: bigint
    }
    'update_product_oracle_id(application,uint64,application)void': {
      product: bigint
      productType: bigint | number
      newOracle: bigint
    }
    'update_locker_precompile(string,byte[],byte[])void': {
      /**
       * The new version.
       */
      version: string
      /**
       * The new approval program.
       */
      approval: Uint8Array
      /**
       * The new clear program.
       */
      clear: Uint8Array
    }
    'update_product_precompile(string,uint64,byte[],byte[])void': {
      /**
       * The new version.
       */
      version: string
      productType: bigint | number
      /**
       * The new approval program.
       */
      approval: Uint8Array
      /**
       * The new clear program.
       */
      clear: Uint8Array
    }
    'append_extra_approval_chunk(byte[])void': {
      /**
       * The new approval program.
       */
      approval: Uint8Array
    }
    'update_locker(address,application,uint64,application)void': {
      manager: string
      locker: bigint
      lockerType: bigint | number
      oracle: bigint
    }
    'update_product(application,uint64,application)void': {
      product: bigint
      productType: bigint | number
      oracle: bigint
    }
    'create_locker(address,uint64,pay)uint64': {
      /**
       * The manager address.
       */
      manager: string
      /**
       * The locker type.
       */
      lockerType: bigint | number
      /**
       * The fee transaction.
       */
      feeTxn: AppMethodCallTransactionArgument
    }
    'create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64': {
      /**
       * The name of the product (subtopia, netflix, etc)
       */
      productName: string
      /**
       * The type of the Product.
       */
      productType: bigint | number
      /**
       * The subscription name of the product (pro, etc)
       */
      subscriptionName: string
      /**
       * The price of the Product.
       */
      price: bigint | number
      /**
       * The maximum number of subscriptions.
       */
      maxSubs: bigint | number
      /**
       * The coin of the Product.
       */
      coin: bigint
      /**
       * The unit name of the Product.
       */
      unitName: string
      /**
       * The image URL of the Product.
       */
      imageUrl: string
      duration: bigint | number
      /**
       * The manager address.
       */
      manager: string
      /**
       * The locker.
       */
      locker: bigint
      /**
       * The oracle.
       */
      oracle: bigint
      /**
       * The fee transaction.
       */
      feeTxn: AppMethodCallTransactionArgument
      /**
       * The platform fee transaction.
       */
      platformFeeTxn: AppMethodCallTransactionArgument
    }
    'transfer_product(application,application,address,pay)void': {
      /**
       * The Product.
       */
      product: bigint
      /**
       * The old locker.
       */
      oldLocker: bigint
      /**
       * The new manager address.
       */
      newManager: string
      /**
       * The transfer fee transaction.
       */
      transferFeeTxn: AppMethodCallTransactionArgument
    }
    'delete_product(application,application)void': {
      /**
       * The Product.
       */
      product: bigint
      /**
       * The locker.
       */
      locker: bigint
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create(uint64)void': [oracleId: bigint | number]
    'get_version()string': []
    'get_locker_version()string': []
    'get_product_version(uint64)string': [productType: bigint | number]
    'get_locker(address,uint64)uint64': [manager: string, lockerType: bigint | number]
    'update_oracle_id(application)void': [newOracle: bigint]
    'update_product_oracle_id(application,uint64,application)void': [product: bigint, productType: bigint | number, newOracle: bigint]
    'update_locker_precompile(string,byte[],byte[])void': [version: string, approval: Uint8Array, clear: Uint8Array]
    'update_product_precompile(string,uint64,byte[],byte[])void': [version: string, productType: bigint | number, approval: Uint8Array, clear: Uint8Array]
    'append_extra_approval_chunk(byte[])void': [approval: Uint8Array]
    'update_locker(address,application,uint64,application)void': [manager: string, locker: bigint, lockerType: bigint | number, oracle: bigint]
    'update_product(application,uint64,application)void': [product: bigint, productType: bigint | number, oracle: bigint]
    'create_locker(address,uint64,pay)uint64': [manager: string, lockerType: bigint | number, feeTxn: AppMethodCallTransactionArgument]
    'create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64': [productName: string, productType: bigint | number, subscriptionName: string, price: bigint | number, maxSubs: bigint | number, coin: bigint, unitName: string, imageUrl: string, duration: bigint | number, manager: string, locker: bigint, oracle: bigint, feeTxn: AppMethodCallTransactionArgument, platformFeeTxn: AppMethodCallTransactionArgument]
    'transfer_product(application,application,address,pay)void': [product: bigint, oldLocker: bigint, newManager: string, transferFeeTxn: AppMethodCallTransactionArgument]
    'delete_product(application,application)void': [product: bigint, locker: bigint]
  }
}

/**
 * The return type for each method
 */
export type RegistryReturns = {
  'create(uint64)void': void
  'get_version()string': string
  'get_locker_version()string': string
  'get_product_version(uint64)string': string
  'get_locker(address,uint64)uint64': bigint
  'update_oracle_id(application)void': void
  'update_product_oracle_id(application,uint64,application)void': void
  'update_locker_precompile(string,byte[],byte[])void': void
  'update_product_precompile(string,uint64,byte[],byte[])void': void
  'append_extra_approval_chunk(byte[])void': void
  'update_locker(address,application,uint64,application)void': void
  'update_product(application,uint64,application)void': void
  'create_locker(address,uint64,pay)uint64': bigint
  'create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64': bigint
  'transfer_product(application,application,address,pay)void': void
  'delete_product(application,application)void': void
}

/**
 * Defines the types of available calls and state of the Registry smart contract.
 */
export type RegistryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create(uint64)void' | 'create', {
      argsObj: RegistryArgs['obj']['create(uint64)void']
      argsTuple: RegistryArgs['tuple']['create(uint64)void']
      returns: RegistryReturns['create(uint64)void']
    }>
    & Record<'get_version()string' | 'get_version', {
      argsObj: RegistryArgs['obj']['get_version()string']
      argsTuple: RegistryArgs['tuple']['get_version()string']
      /**
       * The TEAL expression.
       */
      returns: RegistryReturns['get_version()string']
    }>
    & Record<'get_locker_version()string' | 'get_locker_version', {
      argsObj: RegistryArgs['obj']['get_locker_version()string']
      argsTuple: RegistryArgs['tuple']['get_locker_version()string']
      /**
       * The TEAL expression.
       */
      returns: RegistryReturns['get_locker_version()string']
    }>
    & Record<'get_product_version(uint64)string' | 'get_product_version', {
      argsObj: RegistryArgs['obj']['get_product_version(uint64)string']
      argsTuple: RegistryArgs['tuple']['get_product_version(uint64)string']
      /**
       * The TEAL expression.
       */
      returns: RegistryReturns['get_product_version(uint64)string']
    }>
    & Record<'get_locker(address,uint64)uint64' | 'get_locker', {
      argsObj: RegistryArgs['obj']['get_locker(address,uint64)uint64']
      argsTuple: RegistryArgs['tuple']['get_locker(address,uint64)uint64']
      /**
       * The TEAL expression.
       */
      returns: RegistryReturns['get_locker(address,uint64)uint64']
    }>
    & Record<'update_oracle_id(application)void' | 'update_oracle_id', {
      argsObj: RegistryArgs['obj']['update_oracle_id(application)void']
      argsTuple: RegistryArgs['tuple']['update_oracle_id(application)void']
      returns: RegistryReturns['update_oracle_id(application)void']
    }>
    & Record<'update_product_oracle_id(application,uint64,application)void' | 'update_product_oracle_id', {
      argsObj: RegistryArgs['obj']['update_product_oracle_id(application,uint64,application)void']
      argsTuple: RegistryArgs['tuple']['update_product_oracle_id(application,uint64,application)void']
      returns: RegistryReturns['update_product_oracle_id(application,uint64,application)void']
    }>
    & Record<'update_locker_precompile(string,byte[],byte[])void' | 'update_locker_precompile', {
      argsObj: RegistryArgs['obj']['update_locker_precompile(string,byte[],byte[])void']
      argsTuple: RegistryArgs['tuple']['update_locker_precompile(string,byte[],byte[])void']
      returns: RegistryReturns['update_locker_precompile(string,byte[],byte[])void']
    }>
    & Record<'update_product_precompile(string,uint64,byte[],byte[])void' | 'update_product_precompile', {
      argsObj: RegistryArgs['obj']['update_product_precompile(string,uint64,byte[],byte[])void']
      argsTuple: RegistryArgs['tuple']['update_product_precompile(string,uint64,byte[],byte[])void']
      returns: RegistryReturns['update_product_precompile(string,uint64,byte[],byte[])void']
    }>
    & Record<'append_extra_approval_chunk(byte[])void' | 'append_extra_approval_chunk', {
      argsObj: RegistryArgs['obj']['append_extra_approval_chunk(byte[])void']
      argsTuple: RegistryArgs['tuple']['append_extra_approval_chunk(byte[])void']
      returns: RegistryReturns['append_extra_approval_chunk(byte[])void']
    }>
    & Record<'update_locker(address,application,uint64,application)void' | 'update_locker', {
      argsObj: RegistryArgs['obj']['update_locker(address,application,uint64,application)void']
      argsTuple: RegistryArgs['tuple']['update_locker(address,application,uint64,application)void']
      returns: RegistryReturns['update_locker(address,application,uint64,application)void']
    }>
    & Record<'update_product(application,uint64,application)void' | 'update_product', {
      argsObj: RegistryArgs['obj']['update_product(application,uint64,application)void']
      argsTuple: RegistryArgs['tuple']['update_product(application,uint64,application)void']
      returns: RegistryReturns['update_product(application,uint64,application)void']
    }>
    & Record<'create_locker(address,uint64,pay)uint64' | 'create_locker', {
      argsObj: RegistryArgs['obj']['create_locker(address,uint64,pay)uint64']
      argsTuple: RegistryArgs['tuple']['create_locker(address,uint64,pay)uint64']
      /**
       * The TEAL expression.
       */
      returns: RegistryReturns['create_locker(address,uint64,pay)uint64']
    }>
    & Record<'create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64' | 'create_product', {
      argsObj: RegistryArgs['obj']['create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64']
      argsTuple: RegistryArgs['tuple']['create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64']
      /**
       * The TEAL expression.
       */
      returns: RegistryReturns['create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64']
    }>
    & Record<'transfer_product(application,application,address,pay)void' | 'transfer_product', {
      argsObj: RegistryArgs['obj']['transfer_product(application,application,address,pay)void']
      argsTuple: RegistryArgs['tuple']['transfer_product(application,application,address,pay)void']
      returns: RegistryReturns['transfer_product(application,application,address,pay)void']
    }>
    & Record<'delete_product(application,application)void' | 'delete_product', {
      argsObj: RegistryArgs['obj']['delete_product(application,application)void']
      argsTuple: RegistryArgs['tuple']['delete_product(application,application)void']
      returns: RegistryReturns['delete_product(application,application)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        /**
         * ID of Subtopia Price Oracle contract
         */
        oracleId: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type RegistrySignatures = keyof RegistryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type RegistryNonVoidMethodSignatures = keyof RegistryTypes['methods'] extends infer T ? T extends keyof RegistryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Registry smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends RegistrySignatures> = RegistryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Registry smart contract to the method's return type
 */
export type MethodReturn<TSignature extends RegistrySignatures> = RegistryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = RegistryTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type RegistryCreateCallParams =
  | Expand<CallParams<RegistryArgs['obj']['create(uint64)void'] | RegistryArgs['tuple']['create(uint64)void']> & {method: 'create'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<RegistryArgs['obj']['create(uint64)void'] | RegistryArgs['tuple']['create(uint64)void']> & {method: 'create(uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type RegistryUpdateCallParams =
  | Expand<AppClientBareCallParams> & {method?: never}
/**
 * Defines arguments required for the deploy method.
 */
export type RegistryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: RegistryCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: RegistryUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Registry smart contract
 */
export abstract class RegistryParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends RegistryCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create':
          case 'create(uint64)void':
            return RegistryParamsFactory.create.create(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Registry smart contract using the create(uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      create(params: CallParams<RegistryArgs['obj']['create(uint64)void'] | RegistryArgs['tuple']['create(uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create(uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.oracleId],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the get_version()string ABI method
   *
   * Gets the version of the REGISTRY.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getVersion(params: CallParams<RegistryArgs['obj']['get_version()string'] | RegistryArgs['tuple']['get_version()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_version()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_locker_version()string ABI method
   *
   * Gets the latest version of the locker stored in precompiles.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLockerVersion(params: CallParams<RegistryArgs['obj']['get_locker_version()string'] | RegistryArgs['tuple']['get_locker_version()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_locker_version()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_product_version(uint64)string ABI method
   *
   * Gets the latest version of the product stored in precompiles.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getProductVersion(params: CallParams<RegistryArgs['obj']['get_product_version(uint64)string'] | RegistryArgs['tuple']['get_product_version(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_product_version(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.productType],
    }
  }
  /**
   * Constructs a no op call for the get_locker(address,uint64)uint64 ABI method
   *
   * Gets the locker of the manager.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLocker(params: CallParams<RegistryArgs['obj']['get_locker(address,uint64)uint64'] | RegistryArgs['tuple']['get_locker(address,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_locker(address,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.manager, params.args.lockerType],
    }
  }
  /**
   * Constructs a no op call for the update_oracle_id(application)void ABI method
   *
  * Updates the ORACLE (Subtopia Price Oracle) application ID.
  Ars: oracle (abi.Application): The new ORACLE application ID.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateOracleId(params: CallParams<RegistryArgs['obj']['update_oracle_id(application)void'] | RegistryArgs['tuple']['update_oracle_id(application)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_oracle_id(application)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newOracle],
    }
  }
  /**
   * Constructs a no op call for the update_product_oracle_id(application,uint64,application)void ABI method
   *
  * Updates the ORACLE (Subtopia Price Oracle) application ID for child product.
  Ars: oracle (abi.Application): The new ORACLE application ID.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateProductOracleId(params: CallParams<RegistryArgs['obj']['update_product_oracle_id(application,uint64,application)void'] | RegistryArgs['tuple']['update_product_oracle_id(application,uint64,application)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_product_oracle_id(application,uint64,application)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.product, params.args.productType, params.args.newOracle],
    }
  }
  /**
   * Constructs a no op call for the update_locker_precompile(string,byte[],byte[])void ABI method
   *
   * Updates the locker precompiles stored in boxes.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateLockerPrecompile(params: CallParams<RegistryArgs['obj']['update_locker_precompile(string,byte[],byte[])void'] | RegistryArgs['tuple']['update_locker_precompile(string,byte[],byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_locker_precompile(string,byte[],byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.version, params.args.approval, params.args.clear],
    }
  }
  /**
   * Constructs a no op call for the update_product_precompile(string,uint64,byte[],byte[])void ABI method
   *
   * Updates the product precompiles stored in boxes.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateProductPrecompile(params: CallParams<RegistryArgs['obj']['update_product_precompile(string,uint64,byte[],byte[])void'] | RegistryArgs['tuple']['update_product_precompile(string,uint64,byte[],byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_product_precompile(string,uint64,byte[],byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.version, params.args.productType, params.args.approval, params.args.clear],
    }
  }
  /**
   * Constructs a no op call for the append_extra_approval_chunk(byte[])void ABI method
   *
   * Helper utility to allow appending extra approval chunks within single atomic group
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static appendExtraApprovalChunk(params: CallParams<RegistryArgs['obj']['append_extra_approval_chunk(byte[])void'] | RegistryArgs['tuple']['append_extra_approval_chunk(byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'append_extra_approval_chunk(byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.approval],
    }
  }
  /**
   * Constructs a no op call for the update_locker(address,application,uint64,application)void ABI method
   *
  * Updates the locker of the manager.
  Args:     manager (abi.Address): The manager address.     locker (abi.Application): The new locker.     locker_type (abi.Uint64): The locker type.     oracle (abi.Application): Oracle reference, a bit redundant but better than     forcing foreign app reference array manually

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateLocker(params: CallParams<RegistryArgs['obj']['update_locker(address,application,uint64,application)void'] | RegistryArgs['tuple']['update_locker(address,application,uint64,application)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_locker(address,application,uint64,application)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.manager, params.args.locker, params.args.lockerType, params.args.oracle],
    }
  }
  /**
   * Constructs a no op call for the update_product(application,uint64,application)void ABI method
   *
  * Updates the Product of the manager.
  Args:     product (abi.Application): The new product.     oracle (abi.Application): Oracle reference, a bit redundant but better than     forcing foreign app reference array manually

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateProduct(params: CallParams<RegistryArgs['obj']['update_product(application,uint64,application)void'] | RegistryArgs['tuple']['update_product(application,uint64,application)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_product(application,uint64,application)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.product, params.args.productType, params.args.oracle],
    }
  }
  /**
   * Constructs a no op call for the create_locker(address,uint64,pay)uint64 ABI method
   *
   * Creates a locker for the manager.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createLocker(params: CallParams<RegistryArgs['obj']['create_locker(address,uint64,pay)uint64'] | RegistryArgs['tuple']['create_locker(address,uint64,pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_locker(address,uint64,pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.manager, params.args.lockerType, params.args.feeTxn],
    }
  }
  /**
   * Constructs a no op call for the create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64 ABI method
   *
   * Creates a new Product.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createProduct(params: CallParams<RegistryArgs['obj']['create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64'] | RegistryArgs['tuple']['create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.productName, params.args.productType, params.args.subscriptionName, params.args.price, params.args.maxSubs, params.args.coin, params.args.unitName, params.args.imageUrl, params.args.duration, params.args.manager, params.args.locker, params.args.oracle, params.args.feeTxn, params.args.platformFeeTxn],
    }
  }
  /**
   * Constructs a no op call for the transfer_product(application,application,address,pay)void ABI method
   *
   * Transfers the Product to the new manager.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static transferProduct(params: CallParams<RegistryArgs['obj']['transfer_product(application,application,address,pay)void'] | RegistryArgs['tuple']['transfer_product(application,application,address,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'transfer_product(application,application,address,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.product, params.args.oldLocker, params.args.newManager, params.args.transferFeeTxn],
    }
  }
  /**
   * Constructs a no op call for the delete_product(application,application)void ABI method
   *
   * Deletes the Product.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteProduct(params: CallParams<RegistryArgs['obj']['delete_product(application,application)void'] | RegistryArgs['tuple']['delete_product(application,application)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'delete_product(application,application)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.product, params.args.locker],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Registry smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class RegistryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `RegistryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }

  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }

  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }

  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }

  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new RegistryClient(this.appFactory.getAppClientById(params))
  }

  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new RegistryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Registry smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: RegistryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? RegistryParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (RegistryCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new RegistryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Registry smart contract using the create(uint64)void ABI method.
       *
       * Creates a new instance of the REGISTRY.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      create: (params: CallParams<RegistryArgs['obj']['create(uint64)void'] | RegistryArgs['tuple']['create(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(RegistryParamsFactory.create.create(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the Registry smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployUpdate call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appFactory.params.bare.deployUpdate(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Registry smart contract using the create(uint64)void ABI method.
       *
       * Creates a new instance of the REGISTRY.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      create: (params: CallParams<RegistryArgs['obj']['create(uint64)void'] | RegistryArgs['tuple']['create(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(RegistryParamsFactory.create.create(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Registry smart contract using an ABI method call using the create(uint64)void ABI method.
       *
       * Creates a new instance of the REGISTRY.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      create: async (params: CallParams<RegistryArgs['obj']['create(uint64)void'] | RegistryArgs['tuple']['create(uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(RegistryParamsFactory.create.create(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | RegistryReturns['create(uint64)void']) }, appClient: new RegistryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Registry smart contract
 */
export class RegistryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `RegistryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Registry app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `RegistryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends RegistryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }

  /**
   * Returns a new `RegistryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<RegistryClient> {
    return new RegistryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }

  /**
   * Returns an `RegistryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<RegistryClient> {
    return new RegistryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }

  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }

  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }

  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }

  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }

  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the Registry smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.params.bare.update(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Registry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Registry smart contract using the `get_version()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Gets the version of the REGISTRY.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The TEAL expression.
     */
    getVersion: (params: CallParams<RegistryArgs['obj']['get_version()string'] | RegistryArgs['tuple']['get_version()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RegistryParamsFactory.getVersion(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `get_locker_version()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Gets the latest version of the locker stored in precompiles.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The TEAL expression.
     */
    getLockerVersion: (params: CallParams<RegistryArgs['obj']['get_locker_version()string'] | RegistryArgs['tuple']['get_locker_version()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RegistryParamsFactory.getLockerVersion(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `get_product_version(uint64)string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Gets the latest version of the product stored in precompiles.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The TEAL expression.
     */
    getProductVersion: (params: CallParams<RegistryArgs['obj']['get_product_version(uint64)string'] | RegistryArgs['tuple']['get_product_version(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RegistryParamsFactory.getProductVersion(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `get_locker(address,uint64)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Gets the locker of the manager.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The TEAL expression.
     */
    getLocker: (params: CallParams<RegistryArgs['obj']['get_locker(address,uint64)uint64'] | RegistryArgs['tuple']['get_locker(address,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RegistryParamsFactory.getLocker(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `update_oracle_id(application)void` ABI method.
     *
    * Updates the ORACLE (Subtopia Price Oracle) application ID.
    Ars: oracle (abi.Application): The new ORACLE application ID.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateOracleId: (params: CallParams<RegistryArgs['obj']['update_oracle_id(application)void'] | RegistryArgs['tuple']['update_oracle_id(application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RegistryParamsFactory.updateOracleId(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `update_product_oracle_id(application,uint64,application)void` ABI method.
     *
    * Updates the ORACLE (Subtopia Price Oracle) application ID for child product.
    Ars: oracle (abi.Application): The new ORACLE application ID.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateProductOracleId: (params: CallParams<RegistryArgs['obj']['update_product_oracle_id(application,uint64,application)void'] | RegistryArgs['tuple']['update_product_oracle_id(application,uint64,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RegistryParamsFactory.updateProductOracleId(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `update_locker_precompile(string,byte[],byte[])void` ABI method.
     *
     * Updates the locker precompiles stored in boxes.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateLockerPrecompile: (params: CallParams<RegistryArgs['obj']['update_locker_precompile(string,byte[],byte[])void'] | RegistryArgs['tuple']['update_locker_precompile(string,byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RegistryParamsFactory.updateLockerPrecompile(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `update_product_precompile(string,uint64,byte[],byte[])void` ABI method.
     *
     * Updates the product precompiles stored in boxes.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateProductPrecompile: (params: CallParams<RegistryArgs['obj']['update_product_precompile(string,uint64,byte[],byte[])void'] | RegistryArgs['tuple']['update_product_precompile(string,uint64,byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RegistryParamsFactory.updateProductPrecompile(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `append_extra_approval_chunk(byte[])void` ABI method.
     *
     * Helper utility to allow appending extra approval chunks within single atomic group
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    appendExtraApprovalChunk: (params: CallParams<RegistryArgs['obj']['append_extra_approval_chunk(byte[])void'] | RegistryArgs['tuple']['append_extra_approval_chunk(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RegistryParamsFactory.appendExtraApprovalChunk(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `update_locker(address,application,uint64,application)void` ABI method.
     *
    * Updates the locker of the manager.
    Args:     manager (abi.Address): The manager address.     locker (abi.Application): The new locker.     locker_type (abi.Uint64): The locker type.     oracle (abi.Application): Oracle reference, a bit redundant but better than     forcing foreign app reference array manually

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateLocker: (params: CallParams<RegistryArgs['obj']['update_locker(address,application,uint64,application)void'] | RegistryArgs['tuple']['update_locker(address,application,uint64,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RegistryParamsFactory.updateLocker(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `update_product(application,uint64,application)void` ABI method.
     *
    * Updates the Product of the manager.
    Args:     product (abi.Application): The new product.     oracle (abi.Application): Oracle reference, a bit redundant but better than     forcing foreign app reference array manually

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateProduct: (params: CallParams<RegistryArgs['obj']['update_product(application,uint64,application)void'] | RegistryArgs['tuple']['update_product(application,uint64,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RegistryParamsFactory.updateProduct(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `create_locker(address,uint64,pay)uint64` ABI method.
     *
     * Creates a locker for the manager.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The TEAL expression.
     */
    createLocker: (params: CallParams<RegistryArgs['obj']['create_locker(address,uint64,pay)uint64'] | RegistryArgs['tuple']['create_locker(address,uint64,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RegistryParamsFactory.createLocker(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64` ABI method.
     *
     * Creates a new Product.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The TEAL expression.
     */
    createProduct: (params: CallParams<RegistryArgs['obj']['create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64'] | RegistryArgs['tuple']['create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RegistryParamsFactory.createProduct(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `transfer_product(application,application,address,pay)void` ABI method.
     *
     * Transfers the Product to the new manager.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    transferProduct: (params: CallParams<RegistryArgs['obj']['transfer_product(application,application,address,pay)void'] | RegistryArgs['tuple']['transfer_product(application,application,address,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RegistryParamsFactory.transferProduct(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `delete_product(application,application)void` ABI method.
     *
     * Deletes the Product.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deleteProduct: (params: CallParams<RegistryArgs['obj']['delete_product(application,application)void'] | RegistryArgs['tuple']['delete_product(application,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RegistryParamsFactory.deleteProduct(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the Registry smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.createTransaction.bare.update(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Registry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Registry smart contract using the `get_version()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Gets the version of the REGISTRY.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The TEAL expression.
     */
    getVersion: (params: CallParams<RegistryArgs['obj']['get_version()string'] | RegistryArgs['tuple']['get_version()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RegistryParamsFactory.getVersion(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `get_locker_version()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Gets the latest version of the locker stored in precompiles.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The TEAL expression.
     */
    getLockerVersion: (params: CallParams<RegistryArgs['obj']['get_locker_version()string'] | RegistryArgs['tuple']['get_locker_version()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RegistryParamsFactory.getLockerVersion(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `get_product_version(uint64)string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Gets the latest version of the product stored in precompiles.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The TEAL expression.
     */
    getProductVersion: (params: CallParams<RegistryArgs['obj']['get_product_version(uint64)string'] | RegistryArgs['tuple']['get_product_version(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RegistryParamsFactory.getProductVersion(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `get_locker(address,uint64)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Gets the locker of the manager.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The TEAL expression.
     */
    getLocker: (params: CallParams<RegistryArgs['obj']['get_locker(address,uint64)uint64'] | RegistryArgs['tuple']['get_locker(address,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RegistryParamsFactory.getLocker(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `update_oracle_id(application)void` ABI method.
     *
    * Updates the ORACLE (Subtopia Price Oracle) application ID.
    Ars: oracle (abi.Application): The new ORACLE application ID.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateOracleId: (params: CallParams<RegistryArgs['obj']['update_oracle_id(application)void'] | RegistryArgs['tuple']['update_oracle_id(application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RegistryParamsFactory.updateOracleId(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `update_product_oracle_id(application,uint64,application)void` ABI method.
     *
    * Updates the ORACLE (Subtopia Price Oracle) application ID for child product.
    Ars: oracle (abi.Application): The new ORACLE application ID.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateProductOracleId: (params: CallParams<RegistryArgs['obj']['update_product_oracle_id(application,uint64,application)void'] | RegistryArgs['tuple']['update_product_oracle_id(application,uint64,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RegistryParamsFactory.updateProductOracleId(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `update_locker_precompile(string,byte[],byte[])void` ABI method.
     *
     * Updates the locker precompiles stored in boxes.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateLockerPrecompile: (params: CallParams<RegistryArgs['obj']['update_locker_precompile(string,byte[],byte[])void'] | RegistryArgs['tuple']['update_locker_precompile(string,byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RegistryParamsFactory.updateLockerPrecompile(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `update_product_precompile(string,uint64,byte[],byte[])void` ABI method.
     *
     * Updates the product precompiles stored in boxes.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateProductPrecompile: (params: CallParams<RegistryArgs['obj']['update_product_precompile(string,uint64,byte[],byte[])void'] | RegistryArgs['tuple']['update_product_precompile(string,uint64,byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RegistryParamsFactory.updateProductPrecompile(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `append_extra_approval_chunk(byte[])void` ABI method.
     *
     * Helper utility to allow appending extra approval chunks within single atomic group
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    appendExtraApprovalChunk: (params: CallParams<RegistryArgs['obj']['append_extra_approval_chunk(byte[])void'] | RegistryArgs['tuple']['append_extra_approval_chunk(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RegistryParamsFactory.appendExtraApprovalChunk(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `update_locker(address,application,uint64,application)void` ABI method.
     *
    * Updates the locker of the manager.
    Args:     manager (abi.Address): The manager address.     locker (abi.Application): The new locker.     locker_type (abi.Uint64): The locker type.     oracle (abi.Application): Oracle reference, a bit redundant but better than     forcing foreign app reference array manually

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateLocker: (params: CallParams<RegistryArgs['obj']['update_locker(address,application,uint64,application)void'] | RegistryArgs['tuple']['update_locker(address,application,uint64,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RegistryParamsFactory.updateLocker(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `update_product(application,uint64,application)void` ABI method.
     *
    * Updates the Product of the manager.
    Args:     product (abi.Application): The new product.     oracle (abi.Application): Oracle reference, a bit redundant but better than     forcing foreign app reference array manually

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateProduct: (params: CallParams<RegistryArgs['obj']['update_product(application,uint64,application)void'] | RegistryArgs['tuple']['update_product(application,uint64,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RegistryParamsFactory.updateProduct(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `create_locker(address,uint64,pay)uint64` ABI method.
     *
     * Creates a locker for the manager.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The TEAL expression.
     */
    createLocker: (params: CallParams<RegistryArgs['obj']['create_locker(address,uint64,pay)uint64'] | RegistryArgs['tuple']['create_locker(address,uint64,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RegistryParamsFactory.createLocker(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64` ABI method.
     *
     * Creates a new Product.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The TEAL expression.
     */
    createProduct: (params: CallParams<RegistryArgs['obj']['create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64'] | RegistryArgs['tuple']['create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RegistryParamsFactory.createProduct(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `transfer_product(application,application,address,pay)void` ABI method.
     *
     * Transfers the Product to the new manager.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    transferProduct: (params: CallParams<RegistryArgs['obj']['transfer_product(application,application,address,pay)void'] | RegistryArgs['tuple']['transfer_product(application,application,address,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RegistryParamsFactory.transferProduct(params))
    },

    /**
     * Makes a call to the Registry smart contract using the `delete_product(application,application)void` ABI method.
     *
     * Deletes the Product.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deleteProduct: (params: CallParams<RegistryArgs['obj']['delete_product(application,application)void'] | RegistryArgs['tuple']['delete_product(application,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RegistryParamsFactory.deleteProduct(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the Registry smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & SendParams>) => {
        return this.appClient.send.bare.update(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Registry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Registry smart contract using the `get_version()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Gets the version of the REGISTRY.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The TEAL expression.
     */
    getVersion: async (params: CallParams<RegistryArgs['obj']['get_version()string'] | RegistryArgs['tuple']['get_version()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RegistryParamsFactory.getVersion(params))
      return {...result, return: result.return as unknown as (undefined | RegistryReturns['get_version()string'])}
    },

    /**
     * Makes a call to the Registry smart contract using the `get_locker_version()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Gets the latest version of the locker stored in precompiles.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The TEAL expression.
     */
    getLockerVersion: async (params: CallParams<RegistryArgs['obj']['get_locker_version()string'] | RegistryArgs['tuple']['get_locker_version()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RegistryParamsFactory.getLockerVersion(params))
      return {...result, return: result.return as unknown as (undefined | RegistryReturns['get_locker_version()string'])}
    },

    /**
     * Makes a call to the Registry smart contract using the `get_product_version(uint64)string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Gets the latest version of the product stored in precompiles.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The TEAL expression.
     */
    getProductVersion: async (params: CallParams<RegistryArgs['obj']['get_product_version(uint64)string'] | RegistryArgs['tuple']['get_product_version(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RegistryParamsFactory.getProductVersion(params))
      return {...result, return: result.return as unknown as (undefined | RegistryReturns['get_product_version(uint64)string'])}
    },

    /**
     * Makes a call to the Registry smart contract using the `get_locker(address,uint64)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Gets the locker of the manager.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The TEAL expression.
     */
    getLocker: async (params: CallParams<RegistryArgs['obj']['get_locker(address,uint64)uint64'] | RegistryArgs['tuple']['get_locker(address,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RegistryParamsFactory.getLocker(params))
      return {...result, return: result.return as unknown as (undefined | RegistryReturns['get_locker(address,uint64)uint64'])}
    },

    /**
     * Makes a call to the Registry smart contract using the `update_oracle_id(application)void` ABI method.
     *
    * Updates the ORACLE (Subtopia Price Oracle) application ID.
    Ars: oracle (abi.Application): The new ORACLE application ID.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateOracleId: async (params: CallParams<RegistryArgs['obj']['update_oracle_id(application)void'] | RegistryArgs['tuple']['update_oracle_id(application)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RegistryParamsFactory.updateOracleId(params))
      return {...result, return: result.return as unknown as (undefined | RegistryReturns['update_oracle_id(application)void'])}
    },

    /**
     * Makes a call to the Registry smart contract using the `update_product_oracle_id(application,uint64,application)void` ABI method.
     *
    * Updates the ORACLE (Subtopia Price Oracle) application ID for child product.
    Ars: oracle (abi.Application): The new ORACLE application ID.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateProductOracleId: async (params: CallParams<RegistryArgs['obj']['update_product_oracle_id(application,uint64,application)void'] | RegistryArgs['tuple']['update_product_oracle_id(application,uint64,application)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RegistryParamsFactory.updateProductOracleId(params))
      return {...result, return: result.return as unknown as (undefined | RegistryReturns['update_product_oracle_id(application,uint64,application)void'])}
    },

    /**
     * Makes a call to the Registry smart contract using the `update_locker_precompile(string,byte[],byte[])void` ABI method.
     *
     * Updates the locker precompiles stored in boxes.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateLockerPrecompile: async (params: CallParams<RegistryArgs['obj']['update_locker_precompile(string,byte[],byte[])void'] | RegistryArgs['tuple']['update_locker_precompile(string,byte[],byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RegistryParamsFactory.updateLockerPrecompile(params))
      return {...result, return: result.return as unknown as (undefined | RegistryReturns['update_locker_precompile(string,byte[],byte[])void'])}
    },

    /**
     * Makes a call to the Registry smart contract using the `update_product_precompile(string,uint64,byte[],byte[])void` ABI method.
     *
     * Updates the product precompiles stored in boxes.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateProductPrecompile: async (params: CallParams<RegistryArgs['obj']['update_product_precompile(string,uint64,byte[],byte[])void'] | RegistryArgs['tuple']['update_product_precompile(string,uint64,byte[],byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RegistryParamsFactory.updateProductPrecompile(params))
      return {...result, return: result.return as unknown as (undefined | RegistryReturns['update_product_precompile(string,uint64,byte[],byte[])void'])}
    },

    /**
     * Makes a call to the Registry smart contract using the `append_extra_approval_chunk(byte[])void` ABI method.
     *
     * Helper utility to allow appending extra approval chunks within single atomic group
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    appendExtraApprovalChunk: async (params: CallParams<RegistryArgs['obj']['append_extra_approval_chunk(byte[])void'] | RegistryArgs['tuple']['append_extra_approval_chunk(byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RegistryParamsFactory.appendExtraApprovalChunk(params))
      return {...result, return: result.return as unknown as (undefined | RegistryReturns['append_extra_approval_chunk(byte[])void'])}
    },

    /**
     * Makes a call to the Registry smart contract using the `update_locker(address,application,uint64,application)void` ABI method.
     *
    * Updates the locker of the manager.
    Args:     manager (abi.Address): The manager address.     locker (abi.Application): The new locker.     locker_type (abi.Uint64): The locker type.     oracle (abi.Application): Oracle reference, a bit redundant but better than     forcing foreign app reference array manually

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateLocker: async (params: CallParams<RegistryArgs['obj']['update_locker(address,application,uint64,application)void'] | RegistryArgs['tuple']['update_locker(address,application,uint64,application)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RegistryParamsFactory.updateLocker(params))
      return {...result, return: result.return as unknown as (undefined | RegistryReturns['update_locker(address,application,uint64,application)void'])}
    },

    /**
     * Makes a call to the Registry smart contract using the `update_product(application,uint64,application)void` ABI method.
     *
    * Updates the Product of the manager.
    Args:     product (abi.Application): The new product.     oracle (abi.Application): Oracle reference, a bit redundant but better than     forcing foreign app reference array manually

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateProduct: async (params: CallParams<RegistryArgs['obj']['update_product(application,uint64,application)void'] | RegistryArgs['tuple']['update_product(application,uint64,application)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RegistryParamsFactory.updateProduct(params))
      return {...result, return: result.return as unknown as (undefined | RegistryReturns['update_product(application,uint64,application)void'])}
    },

    /**
     * Makes a call to the Registry smart contract using the `create_locker(address,uint64,pay)uint64` ABI method.
     *
     * Creates a locker for the manager.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The TEAL expression.
     */
    createLocker: async (params: CallParams<RegistryArgs['obj']['create_locker(address,uint64,pay)uint64'] | RegistryArgs['tuple']['create_locker(address,uint64,pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RegistryParamsFactory.createLocker(params))
      return {...result, return: result.return as unknown as (undefined | RegistryReturns['create_locker(address,uint64,pay)uint64'])}
    },

    /**
     * Makes a call to the Registry smart contract using the `create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64` ABI method.
     *
     * Creates a new Product.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The TEAL expression.
     */
    createProduct: async (params: CallParams<RegistryArgs['obj']['create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64'] | RegistryArgs['tuple']['create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RegistryParamsFactory.createProduct(params))
      return {...result, return: result.return as unknown as (undefined | RegistryReturns['create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64'])}
    },

    /**
     * Makes a call to the Registry smart contract using the `transfer_product(application,application,address,pay)void` ABI method.
     *
     * Transfers the Product to the new manager.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    transferProduct: async (params: CallParams<RegistryArgs['obj']['transfer_product(application,application,address,pay)void'] | RegistryArgs['tuple']['transfer_product(application,application,address,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RegistryParamsFactory.transferProduct(params))
      return {...result, return: result.return as unknown as (undefined | RegistryReturns['transfer_product(application,application,address,pay)void'])}
    },

    /**
     * Makes a call to the Registry smart contract using the `delete_product(application,application)void` ABI method.
     *
     * Deletes the Product.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deleteProduct: async (params: CallParams<RegistryArgs['obj']['delete_product(application,application)void'] | RegistryArgs['tuple']['delete_product(application,application)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RegistryParamsFactory.deleteProduct(params))
      return {...result, return: result.return as unknown as (undefined | RegistryReturns['delete_product(application,application)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new RegistryClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Registry smart contract using the `get_version()string` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Gets the version of the REGISTRY.
   *
   * @param params The params for the smart contract call
   * @returns The call result: The TEAL expression.
   */
  async getVersion(params: CallParams<RegistryArgs['obj']['get_version()string'] | RegistryArgs['tuple']['get_version()string']> = {args: []}) {
    const result = await this.appClient.send.call(RegistryParamsFactory.getVersion(params))
    return result.return as unknown as RegistryReturns['get_version()string']
  }

  /**
   * Makes a readonly (simulated) call to the Registry smart contract using the `get_locker_version()string` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Gets the latest version of the locker stored in precompiles.
   *
   * @param params The params for the smart contract call
   * @returns The call result: The TEAL expression.
   */
  async getLockerVersion(params: CallParams<RegistryArgs['obj']['get_locker_version()string'] | RegistryArgs['tuple']['get_locker_version()string']> = {args: []}) {
    const result = await this.appClient.send.call(RegistryParamsFactory.getLockerVersion(params))
    return result.return as unknown as RegistryReturns['get_locker_version()string']
  }

  /**
   * Makes a readonly (simulated) call to the Registry smart contract using the `get_product_version(uint64)string` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Gets the latest version of the product stored in precompiles.
   *
   * @param params The params for the smart contract call
   * @returns The call result: The TEAL expression.
   */
  async getProductVersion(params: CallParams<RegistryArgs['obj']['get_product_version(uint64)string'] | RegistryArgs['tuple']['get_product_version(uint64)string']>) {
    const result = await this.appClient.send.call(RegistryParamsFactory.getProductVersion(params))
    return result.return as unknown as RegistryReturns['get_product_version(uint64)string']
  }

  /**
   * Makes a readonly (simulated) call to the Registry smart contract using the `get_locker(address,uint64)uint64` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Gets the locker of the manager.
   *
   * @param params The params for the smart contract call
   * @returns The call result: The TEAL expression.
   */
  async getLocker(params: CallParams<RegistryArgs['obj']['get_locker(address,uint64)uint64'] | RegistryArgs['tuple']['get_locker(address,uint64)uint64']>) {
    const result = await this.appClient.send.call(RegistryParamsFactory.getLocker(params))
    return result.return as unknown as RegistryReturns['get_locker(address,uint64)uint64']
  }

  /**
   * Methods to access state for the current Registry app
   */
  state = {
    /**
     * Methods to access global state for the current Registry app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          oracleId: result.oracle_id,
        }
      },
      /**
       * Get the current value of the oracle_id key in global state
       */
      oracleId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("oracle_id")) as bigint | undefined },
    },
  }

  public newGroup(): RegistryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a get_version()string method call against the Registry contract
       */
      getVersion(params: CallParams<RegistryArgs['obj']['get_version()string'] | RegistryArgs['tuple']['get_version()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getVersion(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_version()string', v))
        return this
      },
      /**
       * Add a get_locker_version()string method call against the Registry contract
       */
      getLockerVersion(params: CallParams<RegistryArgs['obj']['get_locker_version()string'] | RegistryArgs['tuple']['get_locker_version()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLockerVersion(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_locker_version()string', v))
        return this
      },
      /**
       * Add a get_product_version(uint64)string method call against the Registry contract
       */
      getProductVersion(params: CallParams<RegistryArgs['obj']['get_product_version(uint64)string'] | RegistryArgs['tuple']['get_product_version(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getProductVersion(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_product_version(uint64)string', v))
        return this
      },
      /**
       * Add a get_locker(address,uint64)uint64 method call against the Registry contract
       */
      getLocker(params: CallParams<RegistryArgs['obj']['get_locker(address,uint64)uint64'] | RegistryArgs['tuple']['get_locker(address,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLocker(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_locker(address,uint64)uint64', v))
        return this
      },
      /**
       * Add a update_oracle_id(application)void method call against the Registry contract
       */
      updateOracleId(params: CallParams<RegistryArgs['obj']['update_oracle_id(application)void'] | RegistryArgs['tuple']['update_oracle_id(application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateOracleId(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_product_oracle_id(application,uint64,application)void method call against the Registry contract
       */
      updateProductOracleId(params: CallParams<RegistryArgs['obj']['update_product_oracle_id(application,uint64,application)void'] | RegistryArgs['tuple']['update_product_oracle_id(application,uint64,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateProductOracleId(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_locker_precompile(string,byte[],byte[])void method call against the Registry contract
       */
      updateLockerPrecompile(params: CallParams<RegistryArgs['obj']['update_locker_precompile(string,byte[],byte[])void'] | RegistryArgs['tuple']['update_locker_precompile(string,byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateLockerPrecompile(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_product_precompile(string,uint64,byte[],byte[])void method call against the Registry contract
       */
      updateProductPrecompile(params: CallParams<RegistryArgs['obj']['update_product_precompile(string,uint64,byte[],byte[])void'] | RegistryArgs['tuple']['update_product_precompile(string,uint64,byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateProductPrecompile(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a append_extra_approval_chunk(byte[])void method call against the Registry contract
       */
      appendExtraApprovalChunk(params: CallParams<RegistryArgs['obj']['append_extra_approval_chunk(byte[])void'] | RegistryArgs['tuple']['append_extra_approval_chunk(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.appendExtraApprovalChunk(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_locker(address,application,uint64,application)void method call against the Registry contract
       */
      updateLocker(params: CallParams<RegistryArgs['obj']['update_locker(address,application,uint64,application)void'] | RegistryArgs['tuple']['update_locker(address,application,uint64,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateLocker(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_product(application,uint64,application)void method call against the Registry contract
       */
      updateProduct(params: CallParams<RegistryArgs['obj']['update_product(application,uint64,application)void'] | RegistryArgs['tuple']['update_product(application,uint64,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateProduct(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a create_locker(address,uint64,pay)uint64 method call against the Registry contract
       */
      createLocker(params: CallParams<RegistryArgs['obj']['create_locker(address,uint64,pay)uint64'] | RegistryArgs['tuple']['create_locker(address,uint64,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createLocker(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_locker(address,uint64,pay)uint64', v))
        return this
      },
      /**
       * Add a create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64 method call against the Registry contract
       */
      createProduct(params: CallParams<RegistryArgs['obj']['create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64'] | RegistryArgs['tuple']['create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createProduct(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64', v))
        return this
      },
      /**
       * Add a transfer_product(application,application,address,pay)void method call against the Registry contract
       */
      transferProduct(params: CallParams<RegistryArgs['obj']['transfer_product(application,application,address,pay)void'] | RegistryArgs['tuple']['transfer_product(application,application,address,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.transferProduct(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a delete_product(application,application)void method call against the Registry contract
       */
      deleteProduct(params: CallParams<RegistryArgs['obj']['delete_product(application,application)void'] | RegistryArgs['tuple']['delete_product(application,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deleteProduct(params)))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        return {
          bare: (params?: AppClientBareCallParams & AppClientCompilationParams ) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdate(await client.params.update.bare(params)))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the Registry contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as RegistryComposer
  }
}
export type RegistryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the get_version()string ABI method.
   *
   * Gets the version of the REGISTRY.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVersion(params?: CallParams<RegistryArgs['obj']['get_version()string'] | RegistryArgs['tuple']['get_version()string']>): RegistryComposer<[...TReturns, RegistryReturns['get_version()string'] | undefined]>

  /**
   * Calls the get_locker_version()string ABI method.
   *
   * Gets the latest version of the locker stored in precompiles.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLockerVersion(params?: CallParams<RegistryArgs['obj']['get_locker_version()string'] | RegistryArgs['tuple']['get_locker_version()string']>): RegistryComposer<[...TReturns, RegistryReturns['get_locker_version()string'] | undefined]>

  /**
   * Calls the get_product_version(uint64)string ABI method.
   *
   * Gets the latest version of the product stored in precompiles.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProductVersion(params?: CallParams<RegistryArgs['obj']['get_product_version(uint64)string'] | RegistryArgs['tuple']['get_product_version(uint64)string']>): RegistryComposer<[...TReturns, RegistryReturns['get_product_version(uint64)string'] | undefined]>

  /**
   * Calls the get_locker(address,uint64)uint64 ABI method.
   *
   * Gets the locker of the manager.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLocker(params?: CallParams<RegistryArgs['obj']['get_locker(address,uint64)uint64'] | RegistryArgs['tuple']['get_locker(address,uint64)uint64']>): RegistryComposer<[...TReturns, RegistryReturns['get_locker(address,uint64)uint64'] | undefined]>

  /**
   * Calls the update_oracle_id(application)void ABI method.
   *
  * Updates the ORACLE (Subtopia Price Oracle) application ID.
  Ars: oracle (abi.Application): The new ORACLE application ID.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateOracleId(params?: CallParams<RegistryArgs['obj']['update_oracle_id(application)void'] | RegistryArgs['tuple']['update_oracle_id(application)void']>): RegistryComposer<[...TReturns, RegistryReturns['update_oracle_id(application)void'] | undefined]>

  /**
   * Calls the update_product_oracle_id(application,uint64,application)void ABI method.
   *
  * Updates the ORACLE (Subtopia Price Oracle) application ID for child product.
  Ars: oracle (abi.Application): The new ORACLE application ID.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateProductOracleId(params?: CallParams<RegistryArgs['obj']['update_product_oracle_id(application,uint64,application)void'] | RegistryArgs['tuple']['update_product_oracle_id(application,uint64,application)void']>): RegistryComposer<[...TReturns, RegistryReturns['update_product_oracle_id(application,uint64,application)void'] | undefined]>

  /**
   * Calls the update_locker_precompile(string,byte[],byte[])void ABI method.
   *
   * Updates the locker precompiles stored in boxes.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateLockerPrecompile(params?: CallParams<RegistryArgs['obj']['update_locker_precompile(string,byte[],byte[])void'] | RegistryArgs['tuple']['update_locker_precompile(string,byte[],byte[])void']>): RegistryComposer<[...TReturns, RegistryReturns['update_locker_precompile(string,byte[],byte[])void'] | undefined]>

  /**
   * Calls the update_product_precompile(string,uint64,byte[],byte[])void ABI method.
   *
   * Updates the product precompiles stored in boxes.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateProductPrecompile(params?: CallParams<RegistryArgs['obj']['update_product_precompile(string,uint64,byte[],byte[])void'] | RegistryArgs['tuple']['update_product_precompile(string,uint64,byte[],byte[])void']>): RegistryComposer<[...TReturns, RegistryReturns['update_product_precompile(string,uint64,byte[],byte[])void'] | undefined]>

  /**
   * Calls the append_extra_approval_chunk(byte[])void ABI method.
   *
   * Helper utility to allow appending extra approval chunks within single atomic group
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  appendExtraApprovalChunk(params?: CallParams<RegistryArgs['obj']['append_extra_approval_chunk(byte[])void'] | RegistryArgs['tuple']['append_extra_approval_chunk(byte[])void']>): RegistryComposer<[...TReturns, RegistryReturns['append_extra_approval_chunk(byte[])void'] | undefined]>

  /**
   * Calls the update_locker(address,application,uint64,application)void ABI method.
   *
  * Updates the locker of the manager.
  Args:     manager (abi.Address): The manager address.     locker (abi.Application): The new locker.     locker_type (abi.Uint64): The locker type.     oracle (abi.Application): Oracle reference, a bit redundant but better than     forcing foreign app reference array manually

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateLocker(params?: CallParams<RegistryArgs['obj']['update_locker(address,application,uint64,application)void'] | RegistryArgs['tuple']['update_locker(address,application,uint64,application)void']>): RegistryComposer<[...TReturns, RegistryReturns['update_locker(address,application,uint64,application)void'] | undefined]>

  /**
   * Calls the update_product(application,uint64,application)void ABI method.
   *
  * Updates the Product of the manager.
  Args:     product (abi.Application): The new product.     oracle (abi.Application): Oracle reference, a bit redundant but better than     forcing foreign app reference array manually

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateProduct(params?: CallParams<RegistryArgs['obj']['update_product(application,uint64,application)void'] | RegistryArgs['tuple']['update_product(application,uint64,application)void']>): RegistryComposer<[...TReturns, RegistryReturns['update_product(application,uint64,application)void'] | undefined]>

  /**
   * Calls the create_locker(address,uint64,pay)uint64 ABI method.
   *
   * Creates a locker for the manager.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createLocker(params?: CallParams<RegistryArgs['obj']['create_locker(address,uint64,pay)uint64'] | RegistryArgs['tuple']['create_locker(address,uint64,pay)uint64']>): RegistryComposer<[...TReturns, RegistryReturns['create_locker(address,uint64,pay)uint64'] | undefined]>

  /**
   * Calls the create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64 ABI method.
   *
   * Creates a new Product.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createProduct(params?: CallParams<RegistryArgs['obj']['create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64'] | RegistryArgs['tuple']['create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64']>): RegistryComposer<[...TReturns, RegistryReturns['create_product(string,uint64,string,uint64,uint64,asset,string,string,uint64,address,application,application,pay,pay)uint64'] | undefined]>

  /**
   * Calls the transfer_product(application,application,address,pay)void ABI method.
   *
   * Transfers the Product to the new manager.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferProduct(params?: CallParams<RegistryArgs['obj']['transfer_product(application,application,address,pay)void'] | RegistryArgs['tuple']['transfer_product(application,application,address,pay)void']>): RegistryComposer<[...TReturns, RegistryReturns['transfer_product(application,application,address,pay)void'] | undefined]>

  /**
   * Calls the delete_product(application,application)void ABI method.
   *
   * Deletes the Product.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteProduct(params?: CallParams<RegistryArgs['obj']['delete_product(application,application)void'] | RegistryArgs['tuple']['delete_product(application,application)void']>): RegistryComposer<[...TReturns, RegistryReturns['delete_product(application,application)void'] | undefined]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the Registry smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): RegistryComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Registry smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): RegistryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): RegistryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<RegistryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<RegistryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<RegistryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<RegistryComposerResults<TReturns>>
}
export type RegistryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

