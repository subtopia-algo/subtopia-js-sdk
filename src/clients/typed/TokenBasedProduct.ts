/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"TokenBasedProduct","structs":{"Discount":[{"name":"discountType","type":"uint64"},{"name":"discountValue","type":"uint64"},{"name":"expiresAt","type":"uint64"},{"name":"createdAt","type":"uint64"},{"name":"totalClaims","type":"uint64"}],"Subscription":[{"name":"subscriptionId","type":"uint64"},{"name":"productType","type":"uint64"},{"name":"createdAt","type":"uint64"},{"name":"expiresAt","type":"uint64"},{"name":"duration","type":"uint64"}]},"methods":[{"name":"create","desc":"Creates a new instance of the subscription service with the provided parameters.","args":[{"name":"product_name","type":"string","desc":"The title of the product offering subscription."},{"name":"subscription_name","type":"string","desc":"The title of product's subscription, for ex Plus, Pro, etc."},{"name":"manager","type":"address","desc":"The address of the manager of the subscription service."},{"name":"price","type":"uint64","desc":"The price of the subscription service."},{"name":"max_subscribers","type":"uint64","desc":"The maximum number of subscriptions to be sold."},{"name":"coin_id","type":"uint64","desc":"The ASA ID of the subscription service."},{"name":"oracle_id","type":"uint64","desc":"The ID of the Subtopia Price Oracle contract."},{"name":"unit_name","type":"string"},{"name":"image_url","type":"string"},{"name":"duration","type":"uint64","desc":"The duration of the subscription service."}],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"delete","desc":"Deletes the subscription service. Can only be called by the manager account\nwhen there are no active subscriptions or the lifecycle state is not active.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["DeleteApplication"]}},{"name":"get_version","args":[],"returns":{"type":"string"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"get_discount","desc":"Returns the discount if exists.","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64)","desc":"An expression that returns the discount.","struct":"Discount"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"get_subscription","desc":"Retrieves the subscription details of a given subscriber.","args":[{"name":"subscriber","type":"address","desc":"The subscriber address."}],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64)","desc":"An expression that retrieves the subscription details.","struct":"Subscription"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"update_oracle_id","desc":"Updates the ORACLE (Subtopia Price Oracle) application ID.\nArs: new_oracle (abi.Application): The new ORACLE application ID.","args":[{"name":"new_oracle","type":"application"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_manager","desc":"Updates the manager account of the subscription service.","args":[{"name":"new_manager_account","type":"address","desc":"The new manager account address."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_price","desc":"Updates the price of the subscription service.","args":[{"name":"new_price","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_lifecycle","desc":"Set product lifecycle state (ENABLED/DISABLED). Only callable by the manager.","args":[{"name":"lifecycle_state","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"is_discount_expired","desc":"Checks if the discount for the specified duration is expired.","args":[],"returns":{"type":"uint64","desc":"An expression that checks if the discount is expired."},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"create_discount","desc":"Creates a new discount for the subscription service.","args":[{"name":"discount_type","type":"uint64","desc":"The type of discount (percentage or amount)."},{"name":"discount_value","type":"uint64","desc":"The discount value in micro ALGOs."},{"name":"expires_in","type":"uint64","desc":"The number of seconds to append to creation date"},{"name":"fee_txn","type":"pay","desc":"The transaction fee."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"delete_discount","desc":"Deletes a discount for the subscription service.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"compute_price","desc":"Computes the price of the subscription for the given duration.","args":[{"name":"with_discount","type":"bool","desc":"Whether to apply a discount or not."}],"returns":{"type":"uint64","desc":"An expression that computes the price of the subscription."},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"create_subscription","desc":"Subscribes a user to the subscription service and creates a new\nsubscription.","args":[{"name":"subscriber","type":"address","desc":"The subscriber's address."},{"name":"creator_locker","type":"application","desc":"The locker of creator"},{"name":"oracle_id","type":"application","desc":"The oracle app used."},{"name":"fee_txn","type":"pay","desc":"The transaction fee paid to the app."},{"name":"platform_fee_txn","type":"pay","desc":"The platform fee paid."},{"name":"pay_txn","type":"txn","desc":"The payment transaction to fund the subscription."}],"returns":{"type":"uint64","desc":"An expression that subscribes the user and creates a new subscription."},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"is_subscriber","desc":"Checks if a given address is a subscriber of the subscription service.","args":[{"name":"subscriber","type":"address","desc":"The subscriber address."}],"returns":{"type":"uint64","desc":"An expression that checks if the address is a subscriber."},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"claim_subscription","desc":"Allows a subscriber to claim their subscription.","args":[{"name":"subscription","type":"asset","desc":"The subscription asset."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"transfer_subscription","desc":"Transfers a subscription from the sender's address to a new address.","args":[{"name":"new_subscriber","type":"address","desc":"The new address to transfer the subscription to."},{"name":"subscription","type":"asset","desc":"The subscription asset."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"delete_subscription","desc":"Unsubscribes a user from the subscription service and deletes the\nsubscription.","args":[{"name":"subscription","type":"asset","desc":"The subscription ASA ID."}],"returns":{"type":"uint64","desc":"An expression that unsubscribes the user and deletes the subscription."},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":9,"bytes":7},"local":{"ints":0,"bytes":0}},"keys":{"global":{"coin_id":{"key":"Z3NfNw==","keyType":"AVMString","valueType":"AVMUint64","desc":"ASA ID of the subscription, default is ALGO"},"created_at":{"key":"Z3NfMTA=","keyType":"AVMString","valueType":"AVMUint64","desc":"Timestamp of the subscription service creation"},"duration":{"key":"Z3NfMTQ=","keyType":"AVMString","valueType":"AVMUint64","desc":"Duration of the subscription in seconds"},"extra_slot_1":{"key":"Z3NfMTU=","keyType":"AVMString","valueType":"AVMBytes","desc":"Reserved extra slot"},"extra_slot_2":{"key":"Z3NfMTY=","keyType":"AVMString","valueType":"AVMBytes","desc":"Reserved extra slot"},"image_url":{"key":"Z3NfMTM=","keyType":"AVMString","valueType":"AVMBytes","desc":"Image URL of the subscription NFT"},"lifecycle":{"key":"Z3NfOQ==","keyType":"AVMString","valueType":"AVMUint64","desc":"Lifecycle state of the subscription service"},"manager":{"key":"Z3NfMw==","keyType":"AVMString","valueType":"AVMBytes","desc":"Address of the manager of the subscription"},"max_subscribers":{"key":"Z3NfNg==","keyType":"AVMString","valueType":"AVMUint64","desc":"Max subscriptions to be sold"},"oracle_id":{"key":"Z3NfMTE=","keyType":"AVMString","valueType":"AVMUint64","desc":"ID of Subtopia Admin Oracle contract"},"price":{"key":"Z3NfNA==","keyType":"AVMString","valueType":"AVMUint64","desc":"Price of the subscription"},"product_name":{"key":"Z3NfMQ==","keyType":"AVMString","valueType":"AVMBytes","desc":"Name of the product providing subscription"},"product_type":{"key":"Z3NfOA==","keyType":"AVMString","valueType":"AVMUint64","desc":"Type of the subscription"},"subscription_name":{"key":"Z3NfMg==","keyType":"AVMString","valueType":"AVMBytes","desc":"Name of the service providing subscription"},"total_subscribers":{"key":"Z3NfNQ==","keyType":"AVMString","valueType":"AVMUint64","desc":"Total subscriptions sold"},"unit_name":{"key":"Z3NfMTI=","keyType":"AVMString","valueType":"AVMBytes","desc":"Unit name of the subscription NFT"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCnB1c2hpbnQgMCAvLyAwCnJldHVybg=="},"bareActions":{"create":[],"call":["CloseOut","OptIn","UpdateApplication"]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Discount = {
  discountType: bigint,
  discountValue: bigint,
  expiresAt: bigint,
  createdAt: bigint,
  totalClaims: bigint
}


/**
 * Converts the ABI tuple representation of a Discount to the struct representation
 */
export function DiscountFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Discount, APP_SPEC.structs) as Discount
}

export type Subscription = {
  subscriptionId: bigint,
  productType: bigint,
  createdAt: bigint,
  expiresAt: bigint,
  duration: bigint
}


/**
 * Converts the ABI tuple representation of a Subscription to the struct representation
 */
export function SubscriptionFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Subscription, APP_SPEC.structs) as Subscription
}

/**
 * The argument types for the TokenBasedProduct contract
 */
export type TokenBasedProductArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void': {
      /**
       * The title of the product offering subscription.
       */
      productName: string
      /**
       * The title of product's subscription, for ex Plus, Pro, etc.
       */
      subscriptionName: string
      /**
       * The address of the manager of the subscription service.
       */
      manager: string
      /**
       * The price of the subscription service.
       */
      price: bigint | number
      /**
       * The maximum number of subscriptions to be sold.
       */
      maxSubscribers: bigint | number
      /**
       * The ASA ID of the subscription service.
       */
      coinId: bigint | number
      /**
       * The ID of the Subtopia Price Oracle contract.
       */
      oracleId: bigint | number
      unitName: string
      imageUrl: string
      /**
       * The duration of the subscription service.
       */
      duration: bigint | number
    }
    'delete()void': Record<string, never>
    'get_version()string': Record<string, never>
    'get_discount()(uint64,uint64,uint64,uint64,uint64)': Record<string, never>
    'get_subscription(address)(uint64,uint64,uint64,uint64,uint64)': {
      /**
       * The subscriber address.
       */
      subscriber: string
    }
    'update_oracle_id(application)void': {
      newOracle: bigint
    }
    'update_manager(address)void': {
      /**
       * The new manager account address.
       */
      newManagerAccount: string
    }
    'update_price(uint64)void': {
      newPrice: bigint | number
    }
    'update_lifecycle(uint64)void': {
      lifecycleState: bigint | number
    }
    'is_discount_expired()uint64': Record<string, never>
    'create_discount(uint64,uint64,uint64,pay)void': {
      /**
       * The type of discount (percentage or amount).
       */
      discountType: bigint | number
      /**
       * The discount value in micro ALGOs.
       */
      discountValue: bigint | number
      /**
       * The number of seconds to append to creation date
       */
      expiresIn: bigint | number
      /**
       * The transaction fee.
       */
      feeTxn: AppMethodCallTransactionArgument
    }
    'delete_discount()void': Record<string, never>
    'compute_price(bool)uint64': {
      /**
       * Whether to apply a discount or not.
       */
      withDiscount: boolean
    }
    'create_subscription(address,application,application,pay,pay,txn)uint64': {
      /**
       * The subscriber's address.
       */
      subscriber: string
      /**
       * The locker of creator
       */
      creatorLocker: bigint
      /**
       * The oracle app used.
       */
      oracleId: bigint
      /**
       * The transaction fee paid to the app.
       */
      feeTxn?: AppMethodCallTransactionArgument
      /**
       * The platform fee paid.
       */
      platformFeeTxn?: AppMethodCallTransactionArgument
      /**
       * The payment transaction to fund the subscription.
       */
      payTxn: AppMethodCallTransactionArgument
    }
    'is_subscriber(address)uint64': {
      /**
       * The subscriber address.
       */
      subscriber: string
    }
    'claim_subscription(asset)void': {
      /**
       * The subscription asset.
       */
      subscription: bigint
    }
    'transfer_subscription(address,asset)void': {
      /**
       * The new address to transfer the subscription to.
       */
      newSubscriber: string
      /**
       * The subscription asset.
       */
      subscription: bigint
    }
    'delete_subscription(asset)uint64': {
      /**
       * The subscription ASA ID.
       */
      subscription: bigint
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void': [productName: string, subscriptionName: string, manager: string, price: bigint | number, maxSubscribers: bigint | number, coinId: bigint | number, oracleId: bigint | number, unitName: string, imageUrl: string, duration: bigint | number]
    'delete()void': []
    'get_version()string': []
    'get_discount()(uint64,uint64,uint64,uint64,uint64)': []
    'get_subscription(address)(uint64,uint64,uint64,uint64,uint64)': [subscriber: string]
    'update_oracle_id(application)void': [newOracle: bigint]
    'update_manager(address)void': [newManagerAccount: string]
    'update_price(uint64)void': [newPrice: bigint | number]
    'update_lifecycle(uint64)void': [lifecycleState: bigint | number]
    'is_discount_expired()uint64': []
    'create_discount(uint64,uint64,uint64,pay)void': [discountType: bigint | number, discountValue: bigint | number, expiresIn: bigint | number, feeTxn: AppMethodCallTransactionArgument]
    'delete_discount()void': []
    'compute_price(bool)uint64': [withDiscount: boolean]
    'create_subscription(address,application,application,pay,pay,txn)uint64': [subscriber: string, creatorLocker: bigint, oracleId: bigint, feeTxn: AppMethodCallTransactionArgument | undefined, platformFeeTxn: AppMethodCallTransactionArgument | undefined, payTxn: AppMethodCallTransactionArgument]
    'is_subscriber(address)uint64': [subscriber: string]
    'claim_subscription(asset)void': [subscription: bigint]
    'transfer_subscription(address,asset)void': [newSubscriber: string, subscription: bigint]
    'delete_subscription(asset)uint64': [subscription: bigint]
  }
}

/**
 * The return type for each method
 */
export type TokenBasedProductReturns = {
  'create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void': void
  'delete()void': void
  'get_version()string': string
  'get_discount()(uint64,uint64,uint64,uint64,uint64)': Discount
  'get_subscription(address)(uint64,uint64,uint64,uint64,uint64)': Subscription
  'update_oracle_id(application)void': void
  'update_manager(address)void': void
  'update_price(uint64)void': void
  'update_lifecycle(uint64)void': void
  'is_discount_expired()uint64': bigint
  'create_discount(uint64,uint64,uint64,pay)void': void
  'delete_discount()void': void
  'compute_price(bool)uint64': bigint
  'create_subscription(address,application,application,pay,pay,txn)uint64': bigint
  'is_subscriber(address)uint64': bigint
  'claim_subscription(asset)void': void
  'transfer_subscription(address,asset)void': void
  'delete_subscription(asset)uint64': bigint
}

/**
 * Defines the types of available calls and state of the TokenBasedProduct smart contract.
 */
export type TokenBasedProductTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void' | 'create', {
      argsObj: TokenBasedProductArgs['obj']['create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void']
      argsTuple: TokenBasedProductArgs['tuple']['create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void']
      returns: TokenBasedProductReturns['create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void']
    }>
    & Record<'delete()void' | 'delete', {
      argsObj: TokenBasedProductArgs['obj']['delete()void']
      argsTuple: TokenBasedProductArgs['tuple']['delete()void']
      returns: TokenBasedProductReturns['delete()void']
    }>
    & Record<'get_version()string' | 'get_version', {
      argsObj: TokenBasedProductArgs['obj']['get_version()string']
      argsTuple: TokenBasedProductArgs['tuple']['get_version()string']
      returns: TokenBasedProductReturns['get_version()string']
    }>
    & Record<'get_discount()(uint64,uint64,uint64,uint64,uint64)' | 'get_discount', {
      argsObj: TokenBasedProductArgs['obj']['get_discount()(uint64,uint64,uint64,uint64,uint64)']
      argsTuple: TokenBasedProductArgs['tuple']['get_discount()(uint64,uint64,uint64,uint64,uint64)']
      /**
       * An expression that returns the discount.
       */
      returns: TokenBasedProductReturns['get_discount()(uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'get_subscription(address)(uint64,uint64,uint64,uint64,uint64)' | 'get_subscription', {
      argsObj: TokenBasedProductArgs['obj']['get_subscription(address)(uint64,uint64,uint64,uint64,uint64)']
      argsTuple: TokenBasedProductArgs['tuple']['get_subscription(address)(uint64,uint64,uint64,uint64,uint64)']
      /**
       * An expression that retrieves the subscription details.
       */
      returns: TokenBasedProductReturns['get_subscription(address)(uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'update_oracle_id(application)void' | 'update_oracle_id', {
      argsObj: TokenBasedProductArgs['obj']['update_oracle_id(application)void']
      argsTuple: TokenBasedProductArgs['tuple']['update_oracle_id(application)void']
      returns: TokenBasedProductReturns['update_oracle_id(application)void']
    }>
    & Record<'update_manager(address)void' | 'update_manager', {
      argsObj: TokenBasedProductArgs['obj']['update_manager(address)void']
      argsTuple: TokenBasedProductArgs['tuple']['update_manager(address)void']
      returns: TokenBasedProductReturns['update_manager(address)void']
    }>
    & Record<'update_price(uint64)void' | 'update_price', {
      argsObj: TokenBasedProductArgs['obj']['update_price(uint64)void']
      argsTuple: TokenBasedProductArgs['tuple']['update_price(uint64)void']
      returns: TokenBasedProductReturns['update_price(uint64)void']
    }>
    & Record<'update_lifecycle(uint64)void' | 'update_lifecycle', {
      argsObj: TokenBasedProductArgs['obj']['update_lifecycle(uint64)void']
      argsTuple: TokenBasedProductArgs['tuple']['update_lifecycle(uint64)void']
      returns: TokenBasedProductReturns['update_lifecycle(uint64)void']
    }>
    & Record<'is_discount_expired()uint64' | 'is_discount_expired', {
      argsObj: TokenBasedProductArgs['obj']['is_discount_expired()uint64']
      argsTuple: TokenBasedProductArgs['tuple']['is_discount_expired()uint64']
      /**
       * An expression that checks if the discount is expired.
       */
      returns: TokenBasedProductReturns['is_discount_expired()uint64']
    }>
    & Record<'create_discount(uint64,uint64,uint64,pay)void' | 'create_discount', {
      argsObj: TokenBasedProductArgs['obj']['create_discount(uint64,uint64,uint64,pay)void']
      argsTuple: TokenBasedProductArgs['tuple']['create_discount(uint64,uint64,uint64,pay)void']
      returns: TokenBasedProductReturns['create_discount(uint64,uint64,uint64,pay)void']
    }>
    & Record<'delete_discount()void' | 'delete_discount', {
      argsObj: TokenBasedProductArgs['obj']['delete_discount()void']
      argsTuple: TokenBasedProductArgs['tuple']['delete_discount()void']
      returns: TokenBasedProductReturns['delete_discount()void']
    }>
    & Record<'compute_price(bool)uint64' | 'compute_price', {
      argsObj: TokenBasedProductArgs['obj']['compute_price(bool)uint64']
      argsTuple: TokenBasedProductArgs['tuple']['compute_price(bool)uint64']
      /**
       * An expression that computes the price of the subscription.
       */
      returns: TokenBasedProductReturns['compute_price(bool)uint64']
    }>
    & Record<'create_subscription(address,application,application,pay,pay,txn)uint64' | 'create_subscription', {
      argsObj: TokenBasedProductArgs['obj']['create_subscription(address,application,application,pay,pay,txn)uint64']
      argsTuple: TokenBasedProductArgs['tuple']['create_subscription(address,application,application,pay,pay,txn)uint64']
      /**
       * An expression that subscribes the user and creates a new subscription.
       */
      returns: TokenBasedProductReturns['create_subscription(address,application,application,pay,pay,txn)uint64']
    }>
    & Record<'is_subscriber(address)uint64' | 'is_subscriber', {
      argsObj: TokenBasedProductArgs['obj']['is_subscriber(address)uint64']
      argsTuple: TokenBasedProductArgs['tuple']['is_subscriber(address)uint64']
      /**
       * An expression that checks if the address is a subscriber.
       */
      returns: TokenBasedProductReturns['is_subscriber(address)uint64']
    }>
    & Record<'claim_subscription(asset)void' | 'claim_subscription', {
      argsObj: TokenBasedProductArgs['obj']['claim_subscription(asset)void']
      argsTuple: TokenBasedProductArgs['tuple']['claim_subscription(asset)void']
      returns: TokenBasedProductReturns['claim_subscription(asset)void']
    }>
    & Record<'transfer_subscription(address,asset)void' | 'transfer_subscription', {
      argsObj: TokenBasedProductArgs['obj']['transfer_subscription(address,asset)void']
      argsTuple: TokenBasedProductArgs['tuple']['transfer_subscription(address,asset)void']
      returns: TokenBasedProductReturns['transfer_subscription(address,asset)void']
    }>
    & Record<'delete_subscription(asset)uint64' | 'delete_subscription', {
      argsObj: TokenBasedProductArgs['obj']['delete_subscription(asset)uint64']
      argsTuple: TokenBasedProductArgs['tuple']['delete_subscription(asset)uint64']
      /**
       * An expression that unsubscribes the user and deletes the subscription.
       */
      returns: TokenBasedProductReturns['delete_subscription(asset)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        /**
         * ASA ID of the subscription, default is ALGO
         */
        coinId: bigint
        /**
         * Timestamp of the subscription service creation
         */
        createdAt: bigint
        /**
         * Duration of the subscription in seconds
         */
        duration: bigint
        /**
         * Reserved extra slot
         */
        extraSlot_1: BinaryState
        /**
         * Reserved extra slot
         */
        extraSlot_2: BinaryState
        /**
         * Image URL of the subscription NFT
         */
        imageUrl: BinaryState
        /**
         * Lifecycle state of the subscription service
         */
        lifecycle: bigint
        /**
         * Address of the manager of the subscription
         */
        manager: BinaryState
        /**
         * Max subscriptions to be sold
         */
        maxSubscribers: bigint
        /**
         * ID of Subtopia Admin Oracle contract
         */
        oracleId: bigint
        /**
         * Price of the subscription
         */
        price: bigint
        /**
         * Name of the product providing subscription
         */
        productName: BinaryState
        /**
         * Type of the subscription
         */
        productType: bigint
        /**
         * Name of the service providing subscription
         */
        subscriptionName: BinaryState
        /**
         * Total subscriptions sold
         */
        totalSubscribers: bigint
        /**
         * Unit name of the subscription NFT
         */
        unitName: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type TokenBasedProductSignatures = keyof TokenBasedProductTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TokenBasedProductNonVoidMethodSignatures = keyof TokenBasedProductTypes['methods'] extends infer T ? T extends keyof TokenBasedProductTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the TokenBasedProduct smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TokenBasedProductSignatures> = TokenBasedProductTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TokenBasedProduct smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TokenBasedProductSignatures> = TokenBasedProductTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = TokenBasedProductTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type TokenBasedProductCreateCallParams =
  | Expand<CallParams<TokenBasedProductArgs['obj']['create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void'] | TokenBasedProductArgs['tuple']['create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void']> & {method: 'create'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<TokenBasedProductArgs['obj']['create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void'] | TokenBasedProductArgs['tuple']['create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void']> & {method: 'create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type TokenBasedProductUpdateCallParams =
  | Expand<AppClientBareCallParams> & {method?: never}
/**
 * Defines supported delete method params for this smart contract
 */
export type TokenBasedProductDeleteCallParams =
  | Expand<CallParams<TokenBasedProductArgs['obj']['delete()void'] | TokenBasedProductArgs['tuple']['delete()void']> & {method: 'delete'}>
  | Expand<CallParams<TokenBasedProductArgs['obj']['delete()void'] | TokenBasedProductArgs['tuple']['delete()void']> & {method: 'delete()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type TokenBasedProductDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TokenBasedProductCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: TokenBasedProductUpdateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: TokenBasedProductDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the TokenBasedProduct smart contract
 */
export abstract class TokenBasedProductParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends TokenBasedProductCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create':
          case 'create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void':
            return TokenBasedProductParamsFactory.create.create(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the TokenBasedProduct smart contract using the create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      create(params: CallParams<TokenBasedProductArgs['obj']['create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void'] | TokenBasedProductArgs['tuple']['create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.productName, params.args.subscriptionName, params.args.manager, params.args.price, params.args.maxSubscribers, params.args.coinId, params.args.oracleId, params.args.unitName, params.args.imageUrl, params.args.duration],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends TokenBasedProductDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'delete':
          case 'delete()void':
            return TokenBasedProductParamsFactory.delete.delete(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the TokenBasedProduct smart contract using the delete()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      delete(params: CallParams<TokenBasedProductArgs['obj']['delete()void'] | TokenBasedProductArgs['tuple']['delete()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'delete()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the get_version()string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getVersion(params: CallParams<TokenBasedProductArgs['obj']['get_version()string'] | TokenBasedProductArgs['tuple']['get_version()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_version()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_discount()(uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * Returns the discount if exists.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getDiscount(params: CallParams<TokenBasedProductArgs['obj']['get_discount()(uint64,uint64,uint64,uint64,uint64)'] | TokenBasedProductArgs['tuple']['get_discount()(uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_discount()(uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_subscription(address)(uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * Retrieves the subscription details of a given subscriber.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getSubscription(params: CallParams<TokenBasedProductArgs['obj']['get_subscription(address)(uint64,uint64,uint64,uint64,uint64)'] | TokenBasedProductArgs['tuple']['get_subscription(address)(uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_subscription(address)(uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.subscriber],
    }
  }
  /**
   * Constructs a no op call for the update_oracle_id(application)void ABI method
   *
  * Updates the ORACLE (Subtopia Price Oracle) application ID.
  Ars: new_oracle (abi.Application): The new ORACLE application ID.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateOracleId(params: CallParams<TokenBasedProductArgs['obj']['update_oracle_id(application)void'] | TokenBasedProductArgs['tuple']['update_oracle_id(application)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_oracle_id(application)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newOracle],
    }
  }
  /**
   * Constructs a no op call for the update_manager(address)void ABI method
   *
   * Updates the manager account of the subscription service.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateManager(params: CallParams<TokenBasedProductArgs['obj']['update_manager(address)void'] | TokenBasedProductArgs['tuple']['update_manager(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_manager(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newManagerAccount],
    }
  }
  /**
   * Constructs a no op call for the update_price(uint64)void ABI method
   *
   * Updates the price of the subscription service.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePrice(params: CallParams<TokenBasedProductArgs['obj']['update_price(uint64)void'] | TokenBasedProductArgs['tuple']['update_price(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_price(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newPrice],
    }
  }
  /**
   * Constructs a no op call for the update_lifecycle(uint64)void ABI method
   *
   * Set product lifecycle state (ENABLED/DISABLED). Only callable by the manager.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateLifecycle(params: CallParams<TokenBasedProductArgs['obj']['update_lifecycle(uint64)void'] | TokenBasedProductArgs['tuple']['update_lifecycle(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_lifecycle(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.lifecycleState],
    }
  }
  /**
   * Constructs a no op call for the is_discount_expired()uint64 ABI method
   *
   * Checks if the discount for the specified duration is expired.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isDiscountExpired(params: CallParams<TokenBasedProductArgs['obj']['is_discount_expired()uint64'] | TokenBasedProductArgs['tuple']['is_discount_expired()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'is_discount_expired()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the create_discount(uint64,uint64,uint64,pay)void ABI method
   *
   * Creates a new discount for the subscription service.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createDiscount(params: CallParams<TokenBasedProductArgs['obj']['create_discount(uint64,uint64,uint64,pay)void'] | TokenBasedProductArgs['tuple']['create_discount(uint64,uint64,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_discount(uint64,uint64,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.discountType, params.args.discountValue, params.args.expiresIn, params.args.feeTxn],
    }
  }
  /**
   * Constructs a no op call for the delete_discount()void ABI method
   *
   * Deletes a discount for the subscription service.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteDiscount(params: CallParams<TokenBasedProductArgs['obj']['delete_discount()void'] | TokenBasedProductArgs['tuple']['delete_discount()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'delete_discount()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the compute_price(bool)uint64 ABI method
   *
   * Computes the price of the subscription for the given duration.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static computePrice(params: CallParams<TokenBasedProductArgs['obj']['compute_price(bool)uint64'] | TokenBasedProductArgs['tuple']['compute_price(bool)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'compute_price(bool)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.withDiscount],
    }
  }
  /**
   * Constructs a no op call for the create_subscription(address,application,application,pay,pay,txn)uint64 ABI method
   *
  * Subscribes a user to the subscription service and creates a new
  subscription.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createSubscription(params: CallParams<TokenBasedProductArgs['obj']['create_subscription(address,application,application,pay,pay,txn)uint64'] | TokenBasedProductArgs['tuple']['create_subscription(address,application,application,pay,pay,txn)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_subscription(address,application,application,pay,pay,txn)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.subscriber, params.args.creatorLocker, params.args.oracleId, params.args.feeTxn, params.args.platformFeeTxn, params.args.payTxn],
    }
  }
  /**
   * Constructs a no op call for the is_subscriber(address)uint64 ABI method
   *
   * Checks if a given address is a subscriber of the subscription service.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isSubscriber(params: CallParams<TokenBasedProductArgs['obj']['is_subscriber(address)uint64'] | TokenBasedProductArgs['tuple']['is_subscriber(address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'is_subscriber(address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.subscriber],
    }
  }
  /**
   * Constructs a no op call for the claim_subscription(asset)void ABI method
   *
   * Allows a subscriber to claim their subscription.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimSubscription(params: CallParams<TokenBasedProductArgs['obj']['claim_subscription(asset)void'] | TokenBasedProductArgs['tuple']['claim_subscription(asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claim_subscription(asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.subscription],
    }
  }
  /**
   * Constructs a no op call for the transfer_subscription(address,asset)void ABI method
   *
   * Transfers a subscription from the sender's address to a new address.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static transferSubscription(params: CallParams<TokenBasedProductArgs['obj']['transfer_subscription(address,asset)void'] | TokenBasedProductArgs['tuple']['transfer_subscription(address,asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'transfer_subscription(address,asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newSubscriber, params.args.subscription],
    }
  }
  /**
   * Constructs a no op call for the delete_subscription(asset)uint64 ABI method
   *
  * Unsubscribes a user from the subscription service and deletes the
  subscription.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteSubscription(params: CallParams<TokenBasedProductArgs['obj']['delete_subscription(asset)uint64'] | TokenBasedProductArgs['tuple']['delete_subscription(asset)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'delete_subscription(asset)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.subscription],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the TokenBasedProduct smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TokenBasedProductFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TokenBasedProductFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }

  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }

  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }

  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }

  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TokenBasedProductClient(this.appFactory.getAppClientById(params))
  }

  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TokenBasedProductClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the TokenBasedProduct smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TokenBasedProductDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? TokenBasedProductParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (TokenBasedProductCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? TokenBasedProductParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (TokenBasedProductDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new TokenBasedProductClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TokenBasedProduct smart contract using the create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void ABI method.
       *
       * Creates a new instance of the subscription service with the provided parameters.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      create: (params: CallParams<TokenBasedProductArgs['obj']['create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void'] | TokenBasedProductArgs['tuple']['create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(TokenBasedProductParamsFactory.create.create(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the TokenBasedProduct smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployUpdate call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appFactory.params.bare.deployUpdate(params)
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the TokenBasedProduct smart contract using the delete()void ABI method.
       *
      * Deletes the subscription service. Can only be called by the manager account
      when there are no active subscriptions or the lifecycle state is not active.

       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      delete: (params: CallParams<TokenBasedProductArgs['obj']['delete()void'] | TokenBasedProductArgs['tuple']['delete()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(TokenBasedProductParamsFactory.delete.delete(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TokenBasedProduct smart contract using the create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void ABI method.
       *
       * Creates a new instance of the subscription service with the provided parameters.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      create: (params: CallParams<TokenBasedProductArgs['obj']['create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void'] | TokenBasedProductArgs['tuple']['create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(TokenBasedProductParamsFactory.create.create(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TokenBasedProduct smart contract using an ABI method call using the create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void ABI method.
       *
       * Creates a new instance of the subscription service with the provided parameters.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      create: async (params: CallParams<TokenBasedProductArgs['obj']['create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void'] | TokenBasedProductArgs['tuple']['create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(TokenBasedProductParamsFactory.create.create(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | TokenBasedProductReturns['create(string,string,address,uint64,uint64,uint64,uint64,string,string,uint64)void']) }, appClient: new TokenBasedProductClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the TokenBasedProduct smart contract
 */
export class TokenBasedProductClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TokenBasedProductClient`
   *
   * @param appClient An `AppClient` instance which has been created with the TokenBasedProduct app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TokenBasedProductClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TokenBasedProductNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }

  /**
   * Returns a new `TokenBasedProductClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TokenBasedProductClient> {
    return new TokenBasedProductClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }

  /**
   * Returns an `TokenBasedProductClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TokenBasedProductClient> {
    return new TokenBasedProductClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }

  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }

  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }

  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }

  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }

  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the TokenBasedProduct smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.params.bare.update(params)
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the TokenBasedProduct smart contract using the `delete()void` ABI method.
       *
      * Deletes the subscription service. Can only be called by the manager account
      when there are no active subscriptions or the lifecycle state is not active.

       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      delete: (params: CallParams<TokenBasedProductArgs['obj']['delete()void'] | TokenBasedProductArgs['tuple']['delete()void']> = {args: []}) => {
        return this.appClient.params.delete(TokenBasedProductParamsFactory.delete.delete(params))
      },

    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the TokenBasedProduct smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.params.bare.optIn(params)
      },
    },

    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the TokenBasedProduct smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The closeOut result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.params.bare.closeOut(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the TokenBasedProduct smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `get_version()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getVersion: (params: CallParams<TokenBasedProductArgs['obj']['get_version()string'] | TokenBasedProductArgs['tuple']['get_version()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TokenBasedProductParamsFactory.getVersion(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `get_discount()(uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the discount if exists.
     *
     * @param params The params for the smart contract call
     * @returns The call params: An expression that returns the discount.
     */
    getDiscount: (params: CallParams<TokenBasedProductArgs['obj']['get_discount()(uint64,uint64,uint64,uint64,uint64)'] | TokenBasedProductArgs['tuple']['get_discount()(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TokenBasedProductParamsFactory.getDiscount(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `get_subscription(address)(uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the subscription details of a given subscriber.
     *
     * @param params The params for the smart contract call
     * @returns The call params: An expression that retrieves the subscription details.
     */
    getSubscription: (params: CallParams<TokenBasedProductArgs['obj']['get_subscription(address)(uint64,uint64,uint64,uint64,uint64)'] | TokenBasedProductArgs['tuple']['get_subscription(address)(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TokenBasedProductParamsFactory.getSubscription(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `update_oracle_id(application)void` ABI method.
     *
    * Updates the ORACLE (Subtopia Price Oracle) application ID.
    Ars: new_oracle (abi.Application): The new ORACLE application ID.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateOracleId: (params: CallParams<TokenBasedProductArgs['obj']['update_oracle_id(application)void'] | TokenBasedProductArgs['tuple']['update_oracle_id(application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TokenBasedProductParamsFactory.updateOracleId(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `update_manager(address)void` ABI method.
     *
     * Updates the manager account of the subscription service.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateManager: (params: CallParams<TokenBasedProductArgs['obj']['update_manager(address)void'] | TokenBasedProductArgs['tuple']['update_manager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TokenBasedProductParamsFactory.updateManager(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `update_price(uint64)void` ABI method.
     *
     * Updates the price of the subscription service.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePrice: (params: CallParams<TokenBasedProductArgs['obj']['update_price(uint64)void'] | TokenBasedProductArgs['tuple']['update_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TokenBasedProductParamsFactory.updatePrice(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `update_lifecycle(uint64)void` ABI method.
     *
     * Set product lifecycle state (ENABLED/DISABLED). Only callable by the manager.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateLifecycle: (params: CallParams<TokenBasedProductArgs['obj']['update_lifecycle(uint64)void'] | TokenBasedProductArgs['tuple']['update_lifecycle(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TokenBasedProductParamsFactory.updateLifecycle(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `is_discount_expired()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Checks if the discount for the specified duration is expired.
     *
     * @param params The params for the smart contract call
     * @returns The call params: An expression that checks if the discount is expired.
     */
    isDiscountExpired: (params: CallParams<TokenBasedProductArgs['obj']['is_discount_expired()uint64'] | TokenBasedProductArgs['tuple']['is_discount_expired()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TokenBasedProductParamsFactory.isDiscountExpired(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `create_discount(uint64,uint64,uint64,pay)void` ABI method.
     *
     * Creates a new discount for the subscription service.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createDiscount: (params: CallParams<TokenBasedProductArgs['obj']['create_discount(uint64,uint64,uint64,pay)void'] | TokenBasedProductArgs['tuple']['create_discount(uint64,uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TokenBasedProductParamsFactory.createDiscount(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `delete_discount()void` ABI method.
     *
     * Deletes a discount for the subscription service.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deleteDiscount: (params: CallParams<TokenBasedProductArgs['obj']['delete_discount()void'] | TokenBasedProductArgs['tuple']['delete_discount()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TokenBasedProductParamsFactory.deleteDiscount(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `compute_price(bool)uint64` ABI method.
     *
     * Computes the price of the subscription for the given duration.
     *
     * @param params The params for the smart contract call
     * @returns The call params: An expression that computes the price of the subscription.
     */
    computePrice: (params: CallParams<TokenBasedProductArgs['obj']['compute_price(bool)uint64'] | TokenBasedProductArgs['tuple']['compute_price(bool)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TokenBasedProductParamsFactory.computePrice(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `create_subscription(address,application,application,pay,pay,txn)uint64` ABI method.
     *
    * Subscribes a user to the subscription service and creates a new
    subscription.

     *
     * @param params The params for the smart contract call
     * @returns The call params: An expression that subscribes the user and creates a new subscription.
     */
    createSubscription: (params: CallParams<TokenBasedProductArgs['obj']['create_subscription(address,application,application,pay,pay,txn)uint64'] | TokenBasedProductArgs['tuple']['create_subscription(address,application,application,pay,pay,txn)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TokenBasedProductParamsFactory.createSubscription(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `is_subscriber(address)uint64` ABI method.
     *
     * Checks if a given address is a subscriber of the subscription service.
     *
     * @param params The params for the smart contract call
     * @returns The call params: An expression that checks if the address is a subscriber.
     */
    isSubscriber: (params: CallParams<TokenBasedProductArgs['obj']['is_subscriber(address)uint64'] | TokenBasedProductArgs['tuple']['is_subscriber(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TokenBasedProductParamsFactory.isSubscriber(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `claim_subscription(asset)void` ABI method.
     *
     * Allows a subscriber to claim their subscription.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimSubscription: (params: CallParams<TokenBasedProductArgs['obj']['claim_subscription(asset)void'] | TokenBasedProductArgs['tuple']['claim_subscription(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TokenBasedProductParamsFactory.claimSubscription(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `transfer_subscription(address,asset)void` ABI method.
     *
     * Transfers a subscription from the sender's address to a new address.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    transferSubscription: (params: CallParams<TokenBasedProductArgs['obj']['transfer_subscription(address,asset)void'] | TokenBasedProductArgs['tuple']['transfer_subscription(address,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TokenBasedProductParamsFactory.transferSubscription(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `delete_subscription(asset)uint64` ABI method.
     *
    * Unsubscribes a user from the subscription service and deletes the
    subscription.

     *
     * @param params The params for the smart contract call
     * @returns The call params: An expression that unsubscribes the user and deletes the subscription.
     */
    deleteSubscription: (params: CallParams<TokenBasedProductArgs['obj']['delete_subscription(asset)uint64'] | TokenBasedProductArgs['tuple']['delete_subscription(asset)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TokenBasedProductParamsFactory.deleteSubscription(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the TokenBasedProduct smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.createTransaction.bare.update(params)
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the TokenBasedProduct smart contract using the `delete()void` ABI method.
       *
      * Deletes the subscription service. Can only be called by the manager account
      when there are no active subscriptions or the lifecycle state is not active.

       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      delete: (params: CallParams<TokenBasedProductArgs['obj']['delete()void'] | TokenBasedProductArgs['tuple']['delete()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(TokenBasedProductParamsFactory.delete.delete(params))
      },

    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the TokenBasedProduct smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.createTransaction.bare.optIn(params)
      },
    },

    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the TokenBasedProduct smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The closeOut result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.createTransaction.bare.closeOut(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the TokenBasedProduct smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `get_version()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getVersion: (params: CallParams<TokenBasedProductArgs['obj']['get_version()string'] | TokenBasedProductArgs['tuple']['get_version()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TokenBasedProductParamsFactory.getVersion(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `get_discount()(uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the discount if exists.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: An expression that returns the discount.
     */
    getDiscount: (params: CallParams<TokenBasedProductArgs['obj']['get_discount()(uint64,uint64,uint64,uint64,uint64)'] | TokenBasedProductArgs['tuple']['get_discount()(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TokenBasedProductParamsFactory.getDiscount(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `get_subscription(address)(uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the subscription details of a given subscriber.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: An expression that retrieves the subscription details.
     */
    getSubscription: (params: CallParams<TokenBasedProductArgs['obj']['get_subscription(address)(uint64,uint64,uint64,uint64,uint64)'] | TokenBasedProductArgs['tuple']['get_subscription(address)(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TokenBasedProductParamsFactory.getSubscription(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `update_oracle_id(application)void` ABI method.
     *
    * Updates the ORACLE (Subtopia Price Oracle) application ID.
    Ars: new_oracle (abi.Application): The new ORACLE application ID.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateOracleId: (params: CallParams<TokenBasedProductArgs['obj']['update_oracle_id(application)void'] | TokenBasedProductArgs['tuple']['update_oracle_id(application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TokenBasedProductParamsFactory.updateOracleId(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `update_manager(address)void` ABI method.
     *
     * Updates the manager account of the subscription service.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateManager: (params: CallParams<TokenBasedProductArgs['obj']['update_manager(address)void'] | TokenBasedProductArgs['tuple']['update_manager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TokenBasedProductParamsFactory.updateManager(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `update_price(uint64)void` ABI method.
     *
     * Updates the price of the subscription service.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePrice: (params: CallParams<TokenBasedProductArgs['obj']['update_price(uint64)void'] | TokenBasedProductArgs['tuple']['update_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TokenBasedProductParamsFactory.updatePrice(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `update_lifecycle(uint64)void` ABI method.
     *
     * Set product lifecycle state (ENABLED/DISABLED). Only callable by the manager.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateLifecycle: (params: CallParams<TokenBasedProductArgs['obj']['update_lifecycle(uint64)void'] | TokenBasedProductArgs['tuple']['update_lifecycle(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TokenBasedProductParamsFactory.updateLifecycle(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `is_discount_expired()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Checks if the discount for the specified duration is expired.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: An expression that checks if the discount is expired.
     */
    isDiscountExpired: (params: CallParams<TokenBasedProductArgs['obj']['is_discount_expired()uint64'] | TokenBasedProductArgs['tuple']['is_discount_expired()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TokenBasedProductParamsFactory.isDiscountExpired(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `create_discount(uint64,uint64,uint64,pay)void` ABI method.
     *
     * Creates a new discount for the subscription service.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createDiscount: (params: CallParams<TokenBasedProductArgs['obj']['create_discount(uint64,uint64,uint64,pay)void'] | TokenBasedProductArgs['tuple']['create_discount(uint64,uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TokenBasedProductParamsFactory.createDiscount(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `delete_discount()void` ABI method.
     *
     * Deletes a discount for the subscription service.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deleteDiscount: (params: CallParams<TokenBasedProductArgs['obj']['delete_discount()void'] | TokenBasedProductArgs['tuple']['delete_discount()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TokenBasedProductParamsFactory.deleteDiscount(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `compute_price(bool)uint64` ABI method.
     *
     * Computes the price of the subscription for the given duration.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: An expression that computes the price of the subscription.
     */
    computePrice: (params: CallParams<TokenBasedProductArgs['obj']['compute_price(bool)uint64'] | TokenBasedProductArgs['tuple']['compute_price(bool)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TokenBasedProductParamsFactory.computePrice(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `create_subscription(address,application,application,pay,pay,txn)uint64` ABI method.
     *
    * Subscribes a user to the subscription service and creates a new
    subscription.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: An expression that subscribes the user and creates a new subscription.
     */
    createSubscription: (params: CallParams<TokenBasedProductArgs['obj']['create_subscription(address,application,application,pay,pay,txn)uint64'] | TokenBasedProductArgs['tuple']['create_subscription(address,application,application,pay,pay,txn)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TokenBasedProductParamsFactory.createSubscription(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `is_subscriber(address)uint64` ABI method.
     *
     * Checks if a given address is a subscriber of the subscription service.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: An expression that checks if the address is a subscriber.
     */
    isSubscriber: (params: CallParams<TokenBasedProductArgs['obj']['is_subscriber(address)uint64'] | TokenBasedProductArgs['tuple']['is_subscriber(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TokenBasedProductParamsFactory.isSubscriber(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `claim_subscription(asset)void` ABI method.
     *
     * Allows a subscriber to claim their subscription.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimSubscription: (params: CallParams<TokenBasedProductArgs['obj']['claim_subscription(asset)void'] | TokenBasedProductArgs['tuple']['claim_subscription(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TokenBasedProductParamsFactory.claimSubscription(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `transfer_subscription(address,asset)void` ABI method.
     *
     * Transfers a subscription from the sender's address to a new address.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    transferSubscription: (params: CallParams<TokenBasedProductArgs['obj']['transfer_subscription(address,asset)void'] | TokenBasedProductArgs['tuple']['transfer_subscription(address,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TokenBasedProductParamsFactory.transferSubscription(params))
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `delete_subscription(asset)uint64` ABI method.
     *
    * Unsubscribes a user from the subscription service and deletes the
    subscription.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: An expression that unsubscribes the user and deletes the subscription.
     */
    deleteSubscription: (params: CallParams<TokenBasedProductArgs['obj']['delete_subscription(asset)uint64'] | TokenBasedProductArgs['tuple']['delete_subscription(asset)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TokenBasedProductParamsFactory.deleteSubscription(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the TokenBasedProduct smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & SendParams>) => {
        return this.appClient.send.bare.update(params)
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the TokenBasedProduct smart contract using the `delete()void` ABI method.
       *
      * Deletes the subscription service. Can only be called by the manager account
      when there are no active subscriptions or the lifecycle state is not active.

       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      delete: async (params: CallParams<TokenBasedProductArgs['obj']['delete()void'] | TokenBasedProductArgs['tuple']['delete()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(TokenBasedProductParamsFactory.delete.delete(params))
        return {...result, return: result.return as unknown as (undefined | TokenBasedProductReturns['delete()void'])}
      },

    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the TokenBasedProduct smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: Expand<AppClientBareCallParams & SendParams>) => {
        return this.appClient.send.bare.optIn(params)
      },
    },

    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the TokenBasedProduct smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The closeOut result
       */
      bare: (params?: Expand<AppClientBareCallParams & SendParams>) => {
        return this.appClient.send.bare.closeOut(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the TokenBasedProduct smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `get_version()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getVersion: async (params: CallParams<TokenBasedProductArgs['obj']['get_version()string'] | TokenBasedProductArgs['tuple']['get_version()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TokenBasedProductParamsFactory.getVersion(params))
      return {...result, return: result.return as unknown as (undefined | TokenBasedProductReturns['get_version()string'])}
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `get_discount()(uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the discount if exists.
     *
     * @param params The params for the smart contract call
     * @returns The call result: An expression that returns the discount.
     */
    getDiscount: async (params: CallParams<TokenBasedProductArgs['obj']['get_discount()(uint64,uint64,uint64,uint64,uint64)'] | TokenBasedProductArgs['tuple']['get_discount()(uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TokenBasedProductParamsFactory.getDiscount(params))
      return {...result, return: result.return as unknown as (undefined | TokenBasedProductReturns['get_discount()(uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `get_subscription(address)(uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retrieves the subscription details of a given subscriber.
     *
     * @param params The params for the smart contract call
     * @returns The call result: An expression that retrieves the subscription details.
     */
    getSubscription: async (params: CallParams<TokenBasedProductArgs['obj']['get_subscription(address)(uint64,uint64,uint64,uint64,uint64)'] | TokenBasedProductArgs['tuple']['get_subscription(address)(uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TokenBasedProductParamsFactory.getSubscription(params))
      return {...result, return: result.return as unknown as (undefined | TokenBasedProductReturns['get_subscription(address)(uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `update_oracle_id(application)void` ABI method.
     *
    * Updates the ORACLE (Subtopia Price Oracle) application ID.
    Ars: new_oracle (abi.Application): The new ORACLE application ID.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateOracleId: async (params: CallParams<TokenBasedProductArgs['obj']['update_oracle_id(application)void'] | TokenBasedProductArgs['tuple']['update_oracle_id(application)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TokenBasedProductParamsFactory.updateOracleId(params))
      return {...result, return: result.return as unknown as (undefined | TokenBasedProductReturns['update_oracle_id(application)void'])}
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `update_manager(address)void` ABI method.
     *
     * Updates the manager account of the subscription service.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateManager: async (params: CallParams<TokenBasedProductArgs['obj']['update_manager(address)void'] | TokenBasedProductArgs['tuple']['update_manager(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TokenBasedProductParamsFactory.updateManager(params))
      return {...result, return: result.return as unknown as (undefined | TokenBasedProductReturns['update_manager(address)void'])}
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `update_price(uint64)void` ABI method.
     *
     * Updates the price of the subscription service.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePrice: async (params: CallParams<TokenBasedProductArgs['obj']['update_price(uint64)void'] | TokenBasedProductArgs['tuple']['update_price(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TokenBasedProductParamsFactory.updatePrice(params))
      return {...result, return: result.return as unknown as (undefined | TokenBasedProductReturns['update_price(uint64)void'])}
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `update_lifecycle(uint64)void` ABI method.
     *
     * Set product lifecycle state (ENABLED/DISABLED). Only callable by the manager.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateLifecycle: async (params: CallParams<TokenBasedProductArgs['obj']['update_lifecycle(uint64)void'] | TokenBasedProductArgs['tuple']['update_lifecycle(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TokenBasedProductParamsFactory.updateLifecycle(params))
      return {...result, return: result.return as unknown as (undefined | TokenBasedProductReturns['update_lifecycle(uint64)void'])}
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `is_discount_expired()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Checks if the discount for the specified duration is expired.
     *
     * @param params The params for the smart contract call
     * @returns The call result: An expression that checks if the discount is expired.
     */
    isDiscountExpired: async (params: CallParams<TokenBasedProductArgs['obj']['is_discount_expired()uint64'] | TokenBasedProductArgs['tuple']['is_discount_expired()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TokenBasedProductParamsFactory.isDiscountExpired(params))
      return {...result, return: result.return as unknown as (undefined | TokenBasedProductReturns['is_discount_expired()uint64'])}
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `create_discount(uint64,uint64,uint64,pay)void` ABI method.
     *
     * Creates a new discount for the subscription service.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createDiscount: async (params: CallParams<TokenBasedProductArgs['obj']['create_discount(uint64,uint64,uint64,pay)void'] | TokenBasedProductArgs['tuple']['create_discount(uint64,uint64,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TokenBasedProductParamsFactory.createDiscount(params))
      return {...result, return: result.return as unknown as (undefined | TokenBasedProductReturns['create_discount(uint64,uint64,uint64,pay)void'])}
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `delete_discount()void` ABI method.
     *
     * Deletes a discount for the subscription service.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deleteDiscount: async (params: CallParams<TokenBasedProductArgs['obj']['delete_discount()void'] | TokenBasedProductArgs['tuple']['delete_discount()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TokenBasedProductParamsFactory.deleteDiscount(params))
      return {...result, return: result.return as unknown as (undefined | TokenBasedProductReturns['delete_discount()void'])}
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `compute_price(bool)uint64` ABI method.
     *
     * Computes the price of the subscription for the given duration.
     *
     * @param params The params for the smart contract call
     * @returns The call result: An expression that computes the price of the subscription.
     */
    computePrice: async (params: CallParams<TokenBasedProductArgs['obj']['compute_price(bool)uint64'] | TokenBasedProductArgs['tuple']['compute_price(bool)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TokenBasedProductParamsFactory.computePrice(params))
      return {...result, return: result.return as unknown as (undefined | TokenBasedProductReturns['compute_price(bool)uint64'])}
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `create_subscription(address,application,application,pay,pay,txn)uint64` ABI method.
     *
    * Subscribes a user to the subscription service and creates a new
    subscription.

     *
     * @param params The params for the smart contract call
     * @returns The call result: An expression that subscribes the user and creates a new subscription.
     */
    createSubscription: async (params: CallParams<TokenBasedProductArgs['obj']['create_subscription(address,application,application,pay,pay,txn)uint64'] | TokenBasedProductArgs['tuple']['create_subscription(address,application,application,pay,pay,txn)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TokenBasedProductParamsFactory.createSubscription(params))
      return {...result, return: result.return as unknown as (undefined | TokenBasedProductReturns['create_subscription(address,application,application,pay,pay,txn)uint64'])}
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `is_subscriber(address)uint64` ABI method.
     *
     * Checks if a given address is a subscriber of the subscription service.
     *
     * @param params The params for the smart contract call
     * @returns The call result: An expression that checks if the address is a subscriber.
     */
    isSubscriber: async (params: CallParams<TokenBasedProductArgs['obj']['is_subscriber(address)uint64'] | TokenBasedProductArgs['tuple']['is_subscriber(address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TokenBasedProductParamsFactory.isSubscriber(params))
      return {...result, return: result.return as unknown as (undefined | TokenBasedProductReturns['is_subscriber(address)uint64'])}
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `claim_subscription(asset)void` ABI method.
     *
     * Allows a subscriber to claim their subscription.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimSubscription: async (params: CallParams<TokenBasedProductArgs['obj']['claim_subscription(asset)void'] | TokenBasedProductArgs['tuple']['claim_subscription(asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TokenBasedProductParamsFactory.claimSubscription(params))
      return {...result, return: result.return as unknown as (undefined | TokenBasedProductReturns['claim_subscription(asset)void'])}
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `transfer_subscription(address,asset)void` ABI method.
     *
     * Transfers a subscription from the sender's address to a new address.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    transferSubscription: async (params: CallParams<TokenBasedProductArgs['obj']['transfer_subscription(address,asset)void'] | TokenBasedProductArgs['tuple']['transfer_subscription(address,asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TokenBasedProductParamsFactory.transferSubscription(params))
      return {...result, return: result.return as unknown as (undefined | TokenBasedProductReturns['transfer_subscription(address,asset)void'])}
    },

    /**
     * Makes a call to the TokenBasedProduct smart contract using the `delete_subscription(asset)uint64` ABI method.
     *
    * Unsubscribes a user from the subscription service and deletes the
    subscription.

     *
     * @param params The params for the smart contract call
     * @returns The call result: An expression that unsubscribes the user and deletes the subscription.
     */
    deleteSubscription: async (params: CallParams<TokenBasedProductArgs['obj']['delete_subscription(asset)uint64'] | TokenBasedProductArgs['tuple']['delete_subscription(asset)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TokenBasedProductParamsFactory.deleteSubscription(params))
      return {...result, return: result.return as unknown as (undefined | TokenBasedProductReturns['delete_subscription(asset)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TokenBasedProductClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the TokenBasedProduct smart contract using the `get_version()string` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getVersion(params: CallParams<TokenBasedProductArgs['obj']['get_version()string'] | TokenBasedProductArgs['tuple']['get_version()string']> = {args: []}) {
    const result = await this.appClient.send.call(TokenBasedProductParamsFactory.getVersion(params))
    return result.return as unknown as TokenBasedProductReturns['get_version()string']
  }

  /**
   * Makes a readonly (simulated) call to the TokenBasedProduct smart contract using the `get_discount()(uint64,uint64,uint64,uint64,uint64)` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the discount if exists.
   *
   * @param params The params for the smart contract call
   * @returns The call result: An expression that returns the discount.
   */
  async getDiscount(params: CallParams<TokenBasedProductArgs['obj']['get_discount()(uint64,uint64,uint64,uint64,uint64)'] | TokenBasedProductArgs['tuple']['get_discount()(uint64,uint64,uint64,uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(TokenBasedProductParamsFactory.getDiscount(params))
    return result.return as unknown as TokenBasedProductReturns['get_discount()(uint64,uint64,uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the TokenBasedProduct smart contract using the `get_subscription(address)(uint64,uint64,uint64,uint64,uint64)` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Retrieves the subscription details of a given subscriber.
   *
   * @param params The params for the smart contract call
   * @returns The call result: An expression that retrieves the subscription details.
   */
  async getSubscription(params: CallParams<TokenBasedProductArgs['obj']['get_subscription(address)(uint64,uint64,uint64,uint64,uint64)'] | TokenBasedProductArgs['tuple']['get_subscription(address)(uint64,uint64,uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(TokenBasedProductParamsFactory.getSubscription(params))
    return result.return as unknown as TokenBasedProductReturns['get_subscription(address)(uint64,uint64,uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the TokenBasedProduct smart contract using the `is_discount_expired()uint64` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Checks if the discount for the specified duration is expired.
   *
   * @param params The params for the smart contract call
   * @returns The call result: An expression that checks if the discount is expired.
   */
  async isDiscountExpired(params: CallParams<TokenBasedProductArgs['obj']['is_discount_expired()uint64'] | TokenBasedProductArgs['tuple']['is_discount_expired()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(TokenBasedProductParamsFactory.isDiscountExpired(params))
    return result.return as unknown as TokenBasedProductReturns['is_discount_expired()uint64']
  }

  /**
   * Methods to access state for the current TokenBasedProduct app
   */
  state = {
    /**
     * Methods to access global state for the current TokenBasedProduct app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          coinId: result.coin_id,
          createdAt: result.created_at,
          duration: result.duration,
          extraSlot_1: new BinaryStateValue(result.extra_slot_1),
          extraSlot_2: new BinaryStateValue(result.extra_slot_2),
          imageUrl: new BinaryStateValue(result.image_url),
          lifecycle: result.lifecycle,
          manager: new BinaryStateValue(result.manager),
          maxSubscribers: result.max_subscribers,
          oracleId: result.oracle_id,
          price: result.price,
          productName: new BinaryStateValue(result.product_name),
          productType: result.product_type,
          subscriptionName: new BinaryStateValue(result.subscription_name),
          totalSubscribers: result.total_subscribers,
          unitName: new BinaryStateValue(result.unit_name),
        }
      },
      /**
       * Get the current value of the coin_id key in global state
       */
      coinId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("coin_id")) as bigint | undefined },
      /**
       * Get the current value of the created_at key in global state
       */
      createdAt: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("created_at")) as bigint | undefined },
      /**
       * Get the current value of the duration key in global state
       */
      duration: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("duration")) as bigint | undefined },
      /**
       * Get the current value of the extra_slot_1 key in global state
       */
      extraSlot_1: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("extra_slot_1")) as Uint8Array | undefined) },
      /**
       * Get the current value of the extra_slot_2 key in global state
       */
      extraSlot_2: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("extra_slot_2")) as Uint8Array | undefined) },
      /**
       * Get the current value of the image_url key in global state
       */
      imageUrl: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("image_url")) as Uint8Array | undefined) },
      /**
       * Get the current value of the lifecycle key in global state
       */
      lifecycle: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lifecycle")) as bigint | undefined },
      /**
       * Get the current value of the manager key in global state
       */
      manager: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("manager")) as Uint8Array | undefined) },
      /**
       * Get the current value of the max_subscribers key in global state
       */
      maxSubscribers: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("max_subscribers")) as bigint | undefined },
      /**
       * Get the current value of the oracle_id key in global state
       */
      oracleId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("oracle_id")) as bigint | undefined },
      /**
       * Get the current value of the price key in global state
       */
      price: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("price")) as bigint | undefined },
      /**
       * Get the current value of the product_name key in global state
       */
      productName: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("product_name")) as Uint8Array | undefined) },
      /**
       * Get the current value of the product_type key in global state
       */
      productType: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("product_type")) as bigint | undefined },
      /**
       * Get the current value of the subscription_name key in global state
       */
      subscriptionName: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("subscription_name")) as Uint8Array | undefined) },
      /**
       * Get the current value of the total_subscribers key in global state
       */
      totalSubscribers: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_subscribers")) as bigint | undefined },
      /**
       * Get the current value of the unit_name key in global state
       */
      unitName: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("unit_name")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): TokenBasedProductComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a get_version()string method call against the TokenBasedProduct contract
       */
      getVersion(params: CallParams<TokenBasedProductArgs['obj']['get_version()string'] | TokenBasedProductArgs['tuple']['get_version()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getVersion(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_version()string', v))
        return this
      },
      /**
       * Add a get_discount()(uint64,uint64,uint64,uint64,uint64) method call against the TokenBasedProduct contract
       */
      getDiscount(params: CallParams<TokenBasedProductArgs['obj']['get_discount()(uint64,uint64,uint64,uint64,uint64)'] | TokenBasedProductArgs['tuple']['get_discount()(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getDiscount(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_discount()(uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a get_subscription(address)(uint64,uint64,uint64,uint64,uint64) method call against the TokenBasedProduct contract
       */
      getSubscription(params: CallParams<TokenBasedProductArgs['obj']['get_subscription(address)(uint64,uint64,uint64,uint64,uint64)'] | TokenBasedProductArgs['tuple']['get_subscription(address)(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getSubscription(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_subscription(address)(uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a update_oracle_id(application)void method call against the TokenBasedProduct contract
       */
      updateOracleId(params: CallParams<TokenBasedProductArgs['obj']['update_oracle_id(application)void'] | TokenBasedProductArgs['tuple']['update_oracle_id(application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateOracleId(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_manager(address)void method call against the TokenBasedProduct contract
       */
      updateManager(params: CallParams<TokenBasedProductArgs['obj']['update_manager(address)void'] | TokenBasedProductArgs['tuple']['update_manager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateManager(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_price(uint64)void method call against the TokenBasedProduct contract
       */
      updatePrice(params: CallParams<TokenBasedProductArgs['obj']['update_price(uint64)void'] | TokenBasedProductArgs['tuple']['update_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updatePrice(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_lifecycle(uint64)void method call against the TokenBasedProduct contract
       */
      updateLifecycle(params: CallParams<TokenBasedProductArgs['obj']['update_lifecycle(uint64)void'] | TokenBasedProductArgs['tuple']['update_lifecycle(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateLifecycle(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a is_discount_expired()uint64 method call against the TokenBasedProduct contract
       */
      isDiscountExpired(params: CallParams<TokenBasedProductArgs['obj']['is_discount_expired()uint64'] | TokenBasedProductArgs['tuple']['is_discount_expired()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isDiscountExpired(params)))
        resultMappers.push((v) => client.decodeReturnValue('is_discount_expired()uint64', v))
        return this
      },
      /**
       * Add a create_discount(uint64,uint64,uint64,pay)void method call against the TokenBasedProduct contract
       */
      createDiscount(params: CallParams<TokenBasedProductArgs['obj']['create_discount(uint64,uint64,uint64,pay)void'] | TokenBasedProductArgs['tuple']['create_discount(uint64,uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createDiscount(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a delete_discount()void method call against the TokenBasedProduct contract
       */
      deleteDiscount(params: CallParams<TokenBasedProductArgs['obj']['delete_discount()void'] | TokenBasedProductArgs['tuple']['delete_discount()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deleteDiscount(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a compute_price(bool)uint64 method call against the TokenBasedProduct contract
       */
      computePrice(params: CallParams<TokenBasedProductArgs['obj']['compute_price(bool)uint64'] | TokenBasedProductArgs['tuple']['compute_price(bool)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.computePrice(params)))
        resultMappers.push((v) => client.decodeReturnValue('compute_price(bool)uint64', v))
        return this
      },
      /**
       * Add a create_subscription(address,application,application,pay,pay,txn)uint64 method call against the TokenBasedProduct contract
       */
      createSubscription(params: CallParams<TokenBasedProductArgs['obj']['create_subscription(address,application,application,pay,pay,txn)uint64'] | TokenBasedProductArgs['tuple']['create_subscription(address,application,application,pay,pay,txn)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createSubscription(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_subscription(address,application,application,pay,pay,txn)uint64', v))
        return this
      },
      /**
       * Add a is_subscriber(address)uint64 method call against the TokenBasedProduct contract
       */
      isSubscriber(params: CallParams<TokenBasedProductArgs['obj']['is_subscriber(address)uint64'] | TokenBasedProductArgs['tuple']['is_subscriber(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isSubscriber(params)))
        resultMappers.push((v) => client.decodeReturnValue('is_subscriber(address)uint64', v))
        return this
      },
      /**
       * Add a claim_subscription(asset)void method call against the TokenBasedProduct contract
       */
      claimSubscription(params: CallParams<TokenBasedProductArgs['obj']['claim_subscription(asset)void'] | TokenBasedProductArgs['tuple']['claim_subscription(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimSubscription(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a transfer_subscription(address,asset)void method call against the TokenBasedProduct contract
       */
      transferSubscription(params: CallParams<TokenBasedProductArgs['obj']['transfer_subscription(address,asset)void'] | TokenBasedProductArgs['tuple']['transfer_subscription(address,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.transferSubscription(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a delete_subscription(asset)uint64 method call against the TokenBasedProduct contract
       */
      deleteSubscription(params: CallParams<TokenBasedProductArgs['obj']['delete_subscription(asset)uint64'] | TokenBasedProductArgs['tuple']['delete_subscription(asset)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deleteSubscription(params)))
        resultMappers.push((v) => client.decodeReturnValue('delete_subscription(asset)uint64', v))
        return this
      },
      get update() {
        return {
          bare: (params?: AppClientBareCallParams & AppClientCompilationParams ) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdate(await client.params.update.bare(params)))
            return this
          },
        }
      },
      get delete() {
        return {
          delete: (params: CallParams<TokenBasedProductArgs['obj']['delete()void'] | TokenBasedProductArgs['tuple']['delete()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.delete(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      get optIn() {
        return {
          bare: (params?: AppClientBareCallParams ) => {
            promiseChain = promiseChain.then(() => composer.addAppCall(client.params.optIn.bare(params)))
            return this
          },
        }
      },
      get closeOut() {
        return {
          bare: (params?: AppClientBareCallParams ) => {
            promiseChain = promiseChain.then(() => composer.addAppCall(client.params.closeOut.bare(params)))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the TokenBasedProduct contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TokenBasedProductComposer
  }
}
export type TokenBasedProductComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the get_version()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVersion(params?: CallParams<TokenBasedProductArgs['obj']['get_version()string'] | TokenBasedProductArgs['tuple']['get_version()string']>): TokenBasedProductComposer<[...TReturns, TokenBasedProductReturns['get_version()string'] | undefined]>

  /**
   * Calls the get_discount()(uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Returns the discount if exists.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDiscount(params?: CallParams<TokenBasedProductArgs['obj']['get_discount()(uint64,uint64,uint64,uint64,uint64)'] | TokenBasedProductArgs['tuple']['get_discount()(uint64,uint64,uint64,uint64,uint64)']>): TokenBasedProductComposer<[...TReturns, TokenBasedProductReturns['get_discount()(uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the get_subscription(address)(uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Retrieves the subscription details of a given subscriber.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getSubscription(params?: CallParams<TokenBasedProductArgs['obj']['get_subscription(address)(uint64,uint64,uint64,uint64,uint64)'] | TokenBasedProductArgs['tuple']['get_subscription(address)(uint64,uint64,uint64,uint64,uint64)']>): TokenBasedProductComposer<[...TReturns, TokenBasedProductReturns['get_subscription(address)(uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the update_oracle_id(application)void ABI method.
   *
  * Updates the ORACLE (Subtopia Price Oracle) application ID.
  Ars: new_oracle (abi.Application): The new ORACLE application ID.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateOracleId(params?: CallParams<TokenBasedProductArgs['obj']['update_oracle_id(application)void'] | TokenBasedProductArgs['tuple']['update_oracle_id(application)void']>): TokenBasedProductComposer<[...TReturns, TokenBasedProductReturns['update_oracle_id(application)void'] | undefined]>

  /**
   * Calls the update_manager(address)void ABI method.
   *
   * Updates the manager account of the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateManager(params?: CallParams<TokenBasedProductArgs['obj']['update_manager(address)void'] | TokenBasedProductArgs['tuple']['update_manager(address)void']>): TokenBasedProductComposer<[...TReturns, TokenBasedProductReturns['update_manager(address)void'] | undefined]>

  /**
   * Calls the update_price(uint64)void ABI method.
   *
   * Updates the price of the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePrice(params?: CallParams<TokenBasedProductArgs['obj']['update_price(uint64)void'] | TokenBasedProductArgs['tuple']['update_price(uint64)void']>): TokenBasedProductComposer<[...TReturns, TokenBasedProductReturns['update_price(uint64)void'] | undefined]>

  /**
   * Calls the update_lifecycle(uint64)void ABI method.
   *
   * Set product lifecycle state (ENABLED/DISABLED). Only callable by the manager.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateLifecycle(params?: CallParams<TokenBasedProductArgs['obj']['update_lifecycle(uint64)void'] | TokenBasedProductArgs['tuple']['update_lifecycle(uint64)void']>): TokenBasedProductComposer<[...TReturns, TokenBasedProductReturns['update_lifecycle(uint64)void'] | undefined]>

  /**
   * Calls the is_discount_expired()uint64 ABI method.
   *
   * Checks if the discount for the specified duration is expired.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isDiscountExpired(params?: CallParams<TokenBasedProductArgs['obj']['is_discount_expired()uint64'] | TokenBasedProductArgs['tuple']['is_discount_expired()uint64']>): TokenBasedProductComposer<[...TReturns, TokenBasedProductReturns['is_discount_expired()uint64'] | undefined]>

  /**
   * Calls the create_discount(uint64,uint64,uint64,pay)void ABI method.
   *
   * Creates a new discount for the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createDiscount(params?: CallParams<TokenBasedProductArgs['obj']['create_discount(uint64,uint64,uint64,pay)void'] | TokenBasedProductArgs['tuple']['create_discount(uint64,uint64,uint64,pay)void']>): TokenBasedProductComposer<[...TReturns, TokenBasedProductReturns['create_discount(uint64,uint64,uint64,pay)void'] | undefined]>

  /**
   * Calls the delete_discount()void ABI method.
   *
   * Deletes a discount for the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteDiscount(params?: CallParams<TokenBasedProductArgs['obj']['delete_discount()void'] | TokenBasedProductArgs['tuple']['delete_discount()void']>): TokenBasedProductComposer<[...TReturns, TokenBasedProductReturns['delete_discount()void'] | undefined]>

  /**
   * Calls the compute_price(bool)uint64 ABI method.
   *
   * Computes the price of the subscription for the given duration.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  computePrice(params?: CallParams<TokenBasedProductArgs['obj']['compute_price(bool)uint64'] | TokenBasedProductArgs['tuple']['compute_price(bool)uint64']>): TokenBasedProductComposer<[...TReturns, TokenBasedProductReturns['compute_price(bool)uint64'] | undefined]>

  /**
   * Calls the create_subscription(address,application,application,pay,pay,txn)uint64 ABI method.
   *
  * Subscribes a user to the subscription service and creates a new
  subscription.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createSubscription(params?: CallParams<TokenBasedProductArgs['obj']['create_subscription(address,application,application,pay,pay,txn)uint64'] | TokenBasedProductArgs['tuple']['create_subscription(address,application,application,pay,pay,txn)uint64']>): TokenBasedProductComposer<[...TReturns, TokenBasedProductReturns['create_subscription(address,application,application,pay,pay,txn)uint64'] | undefined]>

  /**
   * Calls the is_subscriber(address)uint64 ABI method.
   *
   * Checks if a given address is a subscriber of the subscription service.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isSubscriber(params?: CallParams<TokenBasedProductArgs['obj']['is_subscriber(address)uint64'] | TokenBasedProductArgs['tuple']['is_subscriber(address)uint64']>): TokenBasedProductComposer<[...TReturns, TokenBasedProductReturns['is_subscriber(address)uint64'] | undefined]>

  /**
   * Calls the claim_subscription(asset)void ABI method.
   *
   * Allows a subscriber to claim their subscription.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimSubscription(params?: CallParams<TokenBasedProductArgs['obj']['claim_subscription(asset)void'] | TokenBasedProductArgs['tuple']['claim_subscription(asset)void']>): TokenBasedProductComposer<[...TReturns, TokenBasedProductReturns['claim_subscription(asset)void'] | undefined]>

  /**
   * Calls the transfer_subscription(address,asset)void ABI method.
   *
   * Transfers a subscription from the sender's address to a new address.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferSubscription(params?: CallParams<TokenBasedProductArgs['obj']['transfer_subscription(address,asset)void'] | TokenBasedProductArgs['tuple']['transfer_subscription(address,asset)void']>): TokenBasedProductComposer<[...TReturns, TokenBasedProductReturns['transfer_subscription(address,asset)void'] | undefined]>

  /**
   * Calls the delete_subscription(asset)uint64 ABI method.
   *
  * Unsubscribes a user from the subscription service and deletes the
  subscription.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteSubscription(params?: CallParams<TokenBasedProductArgs['obj']['delete_subscription(asset)uint64'] | TokenBasedProductArgs['tuple']['delete_subscription(asset)uint64']>): TokenBasedProductComposer<[...TReturns, TokenBasedProductReturns['delete_subscription(asset)uint64'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the TokenBasedProduct smart contract using the delete()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    delete(params?: CallParams<TokenBasedProductArgs['obj']['delete()void'] | TokenBasedProductArgs['tuple']['delete()void']>): TokenBasedProductComposer<[...TReturns, TokenBasedProductReturns['delete()void'] | undefined]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the TokenBasedProduct smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): TokenBasedProductComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available closeOut methods
   */
  readonly closeOut: {
    /**
     * Makes a close out call to an existing instance of the TokenBasedProduct smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): TokenBasedProductComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the TokenBasedProduct smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): TokenBasedProductComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the TokenBasedProduct smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TokenBasedProductComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TokenBasedProductComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TokenBasedProductComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TokenBasedProductComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TokenBasedProductComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TokenBasedProductComposerResults<TReturns>>
}
export type TokenBasedProductComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

